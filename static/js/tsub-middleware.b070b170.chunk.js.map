{"version":3,"file":"static/js/tsub-middleware.b070b170.chunk.js","mappings":";uLAeaA,EACX,SAACC,GACD,gBAACC,OAAEC,EAAO,UAAEC,EAAW,cAAEC,EAAI,OACb,IAAIC,EAAAA,MAAWL,GACFM,0BAA0BH,GAExCI,SAAQ,SAACC,GAGpB,IAFQ,IAAAC,EAA2BD,EAAI,SAArBE,EAAiBF,EAAI,aAE9BG,EAAI,EAAGA,EAAIF,EAASG,OAAQD,IACnC,GAAIN,EAAAA,QAAaH,EAAQW,IAAKJ,EAASE,MACrCT,EAAQW,IAAMR,EAAAA,UAAeH,EAAQW,IAAKH,EAAaC,IAEnC,OAAhBT,EAAQW,KACV,OAAOT,EAAK,SAMpBA,EAAKF,mNCnCT,cAASY,OAAAA,eAAAA,EAAAA,YAAAA,CAAAC,YAAAA,EAAAC,IAAAA,WAAA,YAAAC,WACT,eAASH,OAAAA,eAAAA,EAAAA,UAAAA,CAAAC,YAAAA,EAAAC,IAAAA,WAAA,YAAAC,WACT,eAASH,OAAAA,eAAAA,EAAAA,QAAAA,CAAAC,YAAAA,EAAAC,IAAAA,WAAA,YAAAC,oLCDT,kBA0CA,SAASC,EAAYC,EAAIC,GAEvB,IAAKC,MAAMC,QAAQH,GACjB,OAA+B,IAAxBI,EAASJ,EAAIC,GAItB,IAAMI,EAAOL,EAAG,GAChB,OAAQK,GAGN,IAAK,IACH,OAAQN,EAAYC,EAAG,GAAIC,GAI7B,IAAK,KACH,IAAK,IAAIT,EAAI,EAAGA,EAAIQ,EAAGP,OAAQD,IAC7B,GAAIO,EAAYC,EAAGR,GAAIS,GACrB,OAAO,EAGX,OAAO,EAET,IAAK,MACH,IAAST,EAAI,EAAGA,EAAIQ,EAAGP,OAAQD,IAC7B,IAAKO,EAAYC,EAAGR,GAAIS,GACtB,OAAO,EAGX,OAAO,EAET,IAAK,IACL,IAAK,KACH,OA2FN,SAAsBK,EAAOC,EAAQC,EAAUP,GAEzCQ,EAAKH,KACPA,EAAQP,EAAYO,EAAOL,IAGzBQ,EAAKF,KACPA,EAASR,EAAYQ,EAAQN,IAGV,kBAAVK,GAAwC,kBAAXC,IACtCD,EAAQI,KAAKC,UAAUL,GACvBC,EAASG,KAAKC,UAAUJ,IAO1B,OAAQC,GAEN,IAAK,IACH,OAAOF,IAAUC,EAEnB,IAAK,KACH,OAAOD,IAAUC,EACnB,QACE,MAAM,IAAIK,MAAM,4CAAqCJ,KAtH9CK,CAAaT,EAASJ,EAAG,GAAIC,GAAQG,EAASJ,EAAG,GAAIC,GAAQI,EAAMJ,GAE5E,IAAK,KACL,IAAK,IACL,IAAK,IACL,IAAK,KAEH,OAmDN,SAAwBK,EAAOC,EAAQC,EAAUP,GAE3CQ,EAAKH,KACPA,EAAQP,EAAYO,EAAOL,IAGzBQ,EAAKF,KACPA,EAASR,EAAYQ,EAAQN,IAG/B,GAAqB,kBAAVK,GAAwC,kBAAXC,EACtC,OAAO,EAIT,OAAQC,GAEN,IAAK,KACH,OAAOF,GAASC,EAElB,IAAK,KACH,OAAOD,GAASC,EAElB,IAAK,IACH,OAAOD,EAAQC,EAEjB,IAAK,IACH,OAAOD,EAAQC,EACjB,QACE,MAAM,IAAIK,MAAM,8CAAuCJ,KAhFhDM,CAAeV,EAASJ,EAAG,GAAIC,GAAQG,EAASJ,EAAG,GAAIC,GAAQI,EAAMJ,GAE9E,IAAK,KACH,OA4CN,SAAqBI,EAAMU,EAAMd,GAC/B,YAAyDe,IAAlDD,EAAKE,MAAK,SAAAC,GAAM,OAAAd,EAASc,EAAIjB,KAAWI,KA7CpCc,CAAYf,EAASJ,EAAG,GAAIC,GAAQG,EAASJ,EAAG,GAAIC,GAAQA,GAIrE,IAAK,WACH,OA2GN,SAAkBK,EAAOC,GACvB,GAAqB,kBAAVD,GAAwC,kBAAXC,EACtC,OAAO,EAGT,OAAkC,IAA3BD,EAAMc,QAAQb,GAhHVc,CAASjB,EAASJ,EAAG,GAAIC,GAAQG,EAASJ,EAAG,GAAIC,IAE1D,IAAK,QACH,OAgHN,SAAeqB,EAAKC,GAClB,GAAmB,kBAARD,GAAoC,kBAATC,EACpC,OAAO,EAGT,OA4CF,SAAqBC,EAASF,WAC5BG,EAAS,KAAOD,EAAQ/B,OAAS,GAAG,CAClC,IAAIiC,OAAI,EACJC,OAAK,EAET,GADID,GAAF5C,EAA2B8C,EAAUJ,IAA/B,KAAEG,EAAK,QAAEH,EAAO,UACpBE,GAAkB,KAAVC,EAEV,OAAO,EAIL,MAAiBE,EAAWF,EAAOL,GAAjCQ,EAAC,IAAEC,EAAE,KAAEC,EAAG,MAChB,GAAIA,EACF,OAAO,EAMT,IAAID,KAAoB,IAAbD,EAAErC,QAAgB+B,EAAQ/B,OAAS,GAA9C,CAKA,GAAIiC,EAEF,IAAK,IAAIlC,EAAI,EAAGA,EAAI8B,EAAI7B,OAAQD,IAAK,CAEnC,GADIsC,GAAFG,EAAiBJ,EAAWF,EAAOL,EAAIY,MAAM1C,EAAI,KAA9C,EAAEuC,EAAE,KAAEC,EAAG,MACVD,EAAI,CAEN,GAAuB,IAAnBP,EAAQ/B,QAAgBqC,EAAErC,OAAS,EACrC,SAGF6B,EAAMQ,EACN,SAASL,EAGX,GAAIO,EACF,OAAO,EAKb,OAAO,EAxBLV,EAAMQ,EA2BV,OAAsB,IAAfR,EAAI7B,OA3FJ0C,CAAYZ,EAAMD,GArHdc,CAAMhC,EAASJ,EAAG,GAAIC,GAAQG,EAASJ,EAAG,GAAIC,IAEvD,IAAK,YACH,IAAMoC,EAASjC,EAASJ,EAAG,GAAIC,GAC/B,MAAsB,kBAAXoC,EACF,KAEFA,EAAOC,cAEhB,IAAK,SAEH,cAAclC,EAASJ,EAAG,GAAIC,GAEhC,IAAK,SACH,OA0GN,SAAgBI,GAEd,GAAa,OAATA,EACF,OAAO,EAIT,IAAKH,MAAMC,QAAQE,IAAyB,kBAATA,EACjC,OAAOkC,IAGT,OAAOlC,EAAKZ,OArHDA,CAAOW,EAASJ,EAAG,GAAIC,IAEhC,QACE,MAAM,IAAIW,MAAM,+CAAwCP,KAI9D,SAASD,EAASC,EAAMJ,GAEtB,OAAIC,MAAMC,QAAQE,GACTA,EAIW,kBAATA,EACFA,EAAKmC,OAIP,aAAIvC,EAAOI,GAuGpB,SAASI,EAAK+B,GAEZ,QAAKtC,MAAMC,QAAQqC,MAMH,cAAbA,EAAM,IAAmC,WAAbA,EAAM,IAAgC,WAAbA,EAAM,KAC3C,IAAjBA,EAAM/C,SAKU,aAAb+C,EAAM,IAAkC,UAAbA,EAAM,KAAoC,IAAjBA,EAAM/C,QA6DjE,SAASmC,EAAUJ,GAOjB,IANA,IAAMiB,EAAS,CACbf,MAAM,EACNC,MAAO,GACPH,QAAS,IAGJA,EAAQ/B,OAAS,GAAoB,MAAf+B,EAAQ,IACnCA,EAAUA,EAAQU,MAAM,GACxBO,EAAOf,MAAO,EAGhB,IACIlC,EADAkD,GAAU,EAGdC,EAAM,IAAKnD,EAAI,EAAGA,EAAIgC,EAAQ/B,OAAQD,IACpC,OAAQgC,EAAQhC,IACd,IAAK,KAECA,EAAI,EAAIgC,EAAQ/B,QAClBD,IAEF,MACF,IAAK,IACHkD,GAAU,EACV,MACF,IAAK,IACHA,GAAU,EACV,MACF,IAAK,IACH,IAAKA,EACH,MAAMC,EAOd,OAFAF,EAAOd,MAAQH,EAAQU,MAAM,EAAG1C,GAChCiD,EAAOjB,QAAUA,EAAQU,MAAM1C,GACxBiD,EAMT,SAASZ,EAAWF,EAAOL,GAOzB,YANMmB,EAAS,CACbX,EAAG,GACHC,IAAI,EACJC,KAAK,GAGAL,EAAMlC,OAAS,GAAG,CACvB,GAAmB,IAAf6B,EAAI7B,OACN,OAAOgD,EAGT,OAAQd,EAAM,IACZ,IAAK,IACH,IAAMiB,EAAOtB,EAAI,GACjBA,EAAMA,EAAIY,MAAM,GAGhB,IAAIW,GAAa,GAFjBlB,EAAQA,EAAMO,MAAM,IAGVzC,OAAS,GAAkB,MAAbkC,EAAM,KAC5BkB,GAAa,EACblB,EAAQA,EAAMO,MAAM,IAMtB,IAFA,IAAIY,GAAa,EACbC,EAAS,IACA,CACX,GAAIpB,EAAMlC,OAAS,GAAkB,MAAbkC,EAAM,IAAcoB,EAAS,EAAG,CACtDpB,EAAQA,EAAMO,MAAM,GACpB,MAGF,IAAIc,EACAC,EAAK,GAGT,GADUD,GAARlE,EAAqCoE,EAAOvB,IAAlC,KAAYA,EAAK,WAAK,MAEhC,OAAOc,EAIT,GADAQ,EAAKD,EACY,MAAbrB,EAAM,KACEsB,GAARhB,EAAqCiB,EAAOvB,EAAMO,MAAM,KAA9C,KAAYP,EAAK,WAAK,OAEhC,OAAOc,EAIPO,GAAMJ,GAAQA,GAAQK,IACxBH,GAAa,GAGfC,IAGF,GAAID,IAAeD,EACjB,OAAOJ,EAET,MACF,IAAK,IACHnB,EAAMA,EAAIY,MAAM,GAChBP,EAAQA,EAAMO,MAAM,GACpB,MACF,IAAK,KAEH,GAAqB,KADrBP,EAAQA,EAAMO,MAAM,IACVzC,OAER,OADAgD,EAAOT,KAAM,EACNS,EAGX,QACE,GAAId,EAAM,KAAOL,EAAI,GACnB,OAAOmB,EAETnB,EAAMA,EAAIY,MAAM,GAChBP,EAAQA,EAAMO,MAAM,IAO1B,OAHAO,EAAOX,EAAIR,EACXmB,EAAOV,IAAK,EACZU,EAAOT,KAAM,EACNS,EAIT,SAASS,EAAOvB,GACd,IAAMc,EAAS,CACbG,KAAM,GACNO,SAAU,GACVnB,KAAK,GAGP,OAAqB,IAAjBL,EAAMlC,QAA6B,MAAbkC,EAAM,IAA2B,MAAbA,EAAM,IAKnC,OAAbA,EAAM,IAEa,KADrBA,EAAQA,EAAMO,MAAM,IACVzC,QANVgD,EAAOT,KAAM,EACNS,IAaTA,EAAOG,KAAOjB,EAAM,GACpBc,EAAOU,SAAWxB,EAAMO,MAAM,GACC,IAA3BO,EAAOU,SAAS1D,SAClBgD,EAAOT,KAAM,GAGRS,GA9cTW,EAAAA,QAAA,SAAgCnD,EAAOoD,GACrC,IAAKA,EACH,MAAM,IAAIzC,MAAM,wBAGlB,OAAQyC,EAAQC,MACd,IAAK,MACH,OASG,EARL,IAAK,MACH,OAUN,SAAatD,EAAyBC,GACpC,IAAKD,EACH,OAAO,EAGT,IACEA,EAAKU,KAAK6C,MAAMvD,GAChB,MAAOwD,GACP,MAAM,IAAI5C,MAAM,gEAAyDZ,EAAE,OAAAyD,OAAMD,IAGnF,IAAMf,EAAS1C,EAAYC,EAAIC,GAC/B,GAAsB,mBAAXwC,EAET,OAAO,EAGT,OAAOA,EA3BIiB,CAAIL,EAAQrD,GAAIC,GACzB,QACE,MAAM,IAAIW,MAAM,0BAAmByC,EAAQC,KAAI,uGCMrD,iBAGE,WAAYzE,GAFK,KAAAA,MAAQ,GAGvB8E,KAAK9E,MAAQA,GAAS,GAc1B,OAXS+E,EAAAA,UAAAA,0BAAP,SAAiCC,GAE/B,IADA,IAAMhF,EAAgB,GACH,MAAA8E,KAAK9E,MAALiF,EAAAA,EAAAA,OAAAA,IAAY,CAA1B,IAAMzE,EAAI,KAETA,EAAKwE,kBAAoBA,QAA4C7C,IAAzB3B,EAAKwE,iBACnDhF,EAAMkF,KAAK1E,GAIf,OAAOR,GAEX,EAlBA,uLCnBA,kBACA,cACA,cACA,WACA,WAsDA,SAASmF,EAAejF,EAAckF,GACpC,IAAK,IAAMC,KAAOD,EAAOE,KACvB,GAAKF,EAAOE,KAAKC,eAAeF,GAAhC,CAKA,IAAMG,EAAgB,KAARH,EAAanF,GAAU,aAAIA,EAASmF,GAGlD,GAAqB,kBAAVG,GAAgC,OAAVA,EAIjC,IAAqB,UAAAJ,EAAOE,KAAKD,GAAZJ,EAAAA,EAAAA,OAAAA,IAAkB,QAC9BO,EADQ,QAQrB,SAASC,EAAgBvF,EAAckF,GACrC,IAAK,IAAMC,KAAOD,EAAOM,MACvB,GAAKN,EAAOM,MAAMH,eAAeF,GAAjC,CAKA,IAAMG,EAAgB,KAARH,EAAanF,GAAU,aAAIA,EAASmF,GAGlD,GAAqB,kBAAVG,GAAgC,OAAVA,EAMjC,IAAK,IAAMG,KAAKH,EACTA,EAAMD,eAAeI,KAIY,IAAlCP,EAAOM,MAAML,GAAK9C,QAAQoD,WACrBH,EAAMG,IAMrB,SAASC,EAAc1F,EAAckF,GAOnC,IAAMS,EAAiBhE,KAAK6C,MAAM7C,KAAKC,UAAU5B,IAEjD,IAAK,IAAMmF,KAAOD,EAAOU,IACvB,GAAKV,EAAOU,IAAIP,eAAeF,GAA/B,CAIA,IAAMU,EAAkCX,EAAOU,IAAIT,GAI7CW,EAAWX,EAAIY,MAAM,KACvBC,OAAM,EAQV,GAPIF,EAASpF,OAAS,GACpBoF,EAASG,MACTD,GAAS,aAAIL,EAAgBG,EAASI,KAAK,OAE3CF,EAAShG,EAGW,kBAAXgG,EAAX,CAKA,GAAIH,EAAUM,KAAM,CAClB,IAAMC,GAAc,aAAIT,EAAgBE,EAAUM,WAC9BlE,IAAhBmE,IACF,IAAAC,MAAKrG,EAASmF,EAAKiB,QAEhB,GAAIP,EAAUS,KAAM,CACzB,IAAMC,GAAc,aAAIZ,EAAgBE,EAAUS,WAC9BrE,IAAhBsE,IACF,IAAAF,MAAKrG,EAASmF,EAAKoB,IAGrB,IAAAC,OAAMxG,EAAS6F,EAAUS,WAGlBT,EAAUR,eAAe,SAChC,IAAAgB,MAAKrG,EAASmF,EAAKU,EAAUY,KAI/B,GAAIZ,EAAUa,UAAW,CACvB,IAAMC,GAAgB,aAAI3G,EAASmF,GAGnC,GAC2B,kBAAlBwB,GACmB,kBAAlBA,GAAgD,OAAlBA,EAEtC,cAIoB1E,IAAlB0E,GACF,IAAAN,MAAKrG,EAASmF,EAAKxD,KAAKC,UAAU+E,KAGlC,IAAAN,MAAKrG,EAASmF,EAAK,gBAM3B,SAASyB,EAAY5G,EAAckF,GACjC,QAAIA,EAAO2B,OAAOC,SAAW,KAElB5B,EAAO2B,OAAOC,SAAW,IAK/B5B,EAAO2B,OAAOE,KAuBrB,SAAiC/G,EAAckF,GAC7C,IAAMI,GAAQ,aAAItF,EAASkF,EAAO2B,OAAOE,MAGnCC,GAAmB,aAAIrF,KAAKC,UAAU0D,IACxC2B,GAAY,GAGZC,EAAwB,GAG5BC,EAAcH,EAAO7D,MAAM,EAAG,GAAI+D,GAGlC,IADA,IAAIE,EAAe,EACV3G,EAAI,EAAGA,EAAI,IACK,IAAnByG,EAAYzG,GADMA,IAKtB2G,IAGF,GAAqB,IAAjBA,EAAoB,CAEtB,IAAMC,EAAgB,GACtBF,EAAcH,EAAO7D,MAAM,EAAG,IAAKkE,GAEnCJ,GAAYG,EAEZF,EAAYI,OAAO,EAAGF,GAGtBC,EAAIC,OAAO,GAAKF,GAChBF,EAAcA,EAAYxC,OAAO2C,GAOnC,OAHAH,EAAY,IAA0B,IAApBA,EAAY,IAAY,EAAI,GAGvC,aAAMK,SAASL,EAAYhB,KAAK,IAAK,GAAIe,GAAY/B,EAAO2B,OAAOC,QA1DnEU,CAAwBxH,EAASkF,IAGnB4B,EAPE5B,EAAO2B,OAAOC,QAS9BW,KAAKC,UAAYZ,KAF1B,IAAuBA,EA2DvB,SAASK,EAAcH,EAAkBW,GACvC,IAAK,IAAIlH,EAAI,EAAGA,EAAI,EAAGA,IAErB,IADA,IAAImH,EAAYZ,EAAOvG,GACdoH,EAAS,IAAKA,GAAU,EAAGA,GAAU,EACxCD,EAAYC,GAAU,GACxBD,GAAaC,EACbF,EAAI3C,KAAK,IAET2C,EAAI3C,KAAK,GA/OjBX,EAAAA,QAAA,SAAkCrE,EAAcQ,GAG9C,IAFA,IAAMsH,EAA0B9H,EAEN,MAAAQ,EAAAuE,EAAAA,EAAAA,OAAAA,IAAc,CAAnC,IAAMgD,EAAW,KACpB,OAAQA,EAAYxD,MAClB,IAAK,OACH,OAAO,KACT,IAAK,kBACHU,EAAe6C,EAAoBC,EAAY7C,QAC/C,MACF,IAAK,mBACHK,EAAgBuC,EAAoBC,EAAY7C,QAChD,MACF,IAAK,eACH,GAAI0B,EAAYkB,EAAoBC,EAAY7C,QAC9C,MAEF,OAAO,KACT,IAAK,iBACHQ,EAAcoC,EAAoBC,EAAY7C,QAC9C,MACF,IAAK,kBAEH,MACF,QACE,MAAM,IAAIrD,MAAM,+BAAwBkG,EAAYxD,KAAI,uBAI9D,OAAOuD,2LCvDT,kBAEAzD,EAAAA,MAAA,SAAsB1D,EAAKqH,GACzB,IAAI,aAAIrH,EAAKqH,GAAO,CAGlB,IAFA,IAAIC,EAAOD,EAAKjC,MAAM,KAClBmC,EAAOD,EAAKhC,MACTgC,EAAKvH,QAA8C,OAApCuH,EAAKA,EAAKvH,OAAS,GAAGyC,OAAO,IACjD+E,EAAOD,EAAKhC,MAAM9C,MAAM,GAAI,GAAK,IAAM+E,EAEzC,KAAOD,EAAKvH,QAAQC,EAAMA,EAAKqH,EAAOC,EAAKE,SAC3C,cAAcxH,EAAIuH,GAEpB,OAAO,mCCUT,IAAIE,EAAiC,oBAAjBC,aAAgCA,kBAAe,EAKnEC,EAAOjE,QAAU+D,sCCOjB,IAOIA,EAPAG,EAAyBC,EAAS,OAClCC,EAAUD,EAAS,OACnBE,EAAWF,EAAS,OAOvBJ,EADIG,IACGE,EAEAC,EAMRJ,EAAOjE,QAAU+D,kCCfjBE,EAAOjE,QAPP,WACC,MAAM,IAAIxC,MAAO,wDCIlB,IAOIuG,EAPAO,EAAwBH,EAAS,OACjCC,EAAUD,EAAS,OACnBE,EAAWF,EAAS,OAOvBJ,EADIO,IACGF,EAEAC,EAMRJ,EAAOjE,QAAU+D,kCCfjBE,EAAOjE,QAPP,WACC,MAAM,IAAIxC,MAAO,oDCRlB,IAAIuG,EAAgC,oBAAhBQ,YAA+BA,iBAAc,EAKjEN,EAAOjE,QAAU+D,sCCOjB,IAOIA,EAPAS,EAAwBL,EAAS,OACjCC,EAAUD,EAAS,OACnBE,EAAWF,EAAS,OAOvBJ,EADIS,IACGJ,EAEAC,EAMRJ,EAAOjE,QAAU+D,kCCfjBE,EAAOjE,QAPP,WACC,MAAM,IAAIxC,MAAO,oDCRlB,IAAIuG,EAAgC,oBAAhBU,YAA+BA,iBAAc,EAKjER,EAAOjE,QAAU+D,sCCOjB,IAOIA,EAPAW,EAAuBP,EAAS,OAChCC,EAAUD,EAAS,OACnBE,EAAWF,EAAS,OAOvBJ,EADIW,IACGN,EAEAC,EAMRJ,EAAOjE,QAAU+D,kCCfjBE,EAAOjE,QAPP,WACC,MAAM,IAAIxC,MAAO,oDCRlB,IAAIuG,EAA+B,oBAAfY,WAA8BA,gBAAa,EAK/DV,EAAOjE,QAAU+D,kCCLjB,IAAIa,EAAiC,oBAAjBZ,aAAgCA,aAAe,KAKnEC,EAAOjE,QAAU4E,sCCOjB,IAAIV,EAAyBC,EAAS,OAKtCF,EAAOjE,QAAUkE,sCCjBjB,IAAIW,EAAiBV,EAAS,OAC1BW,EAAqBX,EAAS,OAwClCF,EAAOjE,QA1BP,WACC,IAAI+E,EACAzB,EAEJ,GAAmC,oBAAvBwB,EACX,OAAO,EAGR,IACCxB,EAAM,IAAIwB,EAAoB,CAAE,EAAK,MAAO,KAAM3F,MAClD4F,EACCF,EAAgBvB,IACH,IAAbA,EAAK,IACQ,OAAbA,EAAK,KACS,OAAdA,EAAK,IACLA,EAAK,KAAQA,EAAK,GAElB,MAAQ1E,GACTmG,GAAO,EAER,OAAOA,uCChBR,IAAIC,EAAab,EAAS,OAK1BF,EAAOjE,QAAUgF,kCCxBjB,IAAIC,EAAM1I,OAAO2I,UAAUlE,eAyC3BiD,EAAOjE,QAbP,SAAqBZ,EAAO+F,GAC3B,YACW,IAAV/F,GACU,OAAVA,GAIM6F,EAAIG,KAAMhG,EAAO+F,wCCvBzB,IAAIE,EAAmBlB,EAAS,OAKhCF,EAAOjE,QAAUqF,kCCEjBpB,EAAOjE,QAVP,WACC,MACmB,oBAAXsF,QACoB,kBAApBA,OAAQ,4CCAjB,IAAIC,EAAwBpB,EAAS,OAKrCF,EAAOjE,QAAUuF,sCCjBjB,IAKIC,EALarB,EAAS,MAKhBsB,GAqBVxB,EAAOjE,QAPP,WACC,OAASwF,GAAqC,kBAAvBF,OAAOI,iDCR/B,IAAIpB,EAAwBH,EAAS,OAKrCF,EAAOjE,QAAUsE,sCCjBjB,IAAIqB,EAAgBxB,EAAS,OACzByB,EAAazB,EAAS,OACtB0B,EAAoB1B,EAAS,OA0CjCF,EAAOjE,QA5BP,WACC,IAAI+E,EACAzB,EAEJ,GAAkC,oBAAtBuC,EACX,OAAO,EAGR,IAECvC,EAAM,IAAIuC,EADVvC,EAAM,CAAE,EAAG,MAAO,KAAMsC,EAAW,EAAGA,EAAW,IAEjDb,EACCY,EAAerC,IACF,IAAbA,EAAK,IACQ,IAAbA,EAAK,IACLA,EAAK,KAAQsC,EAAW,GACX,IAAbtC,EAAK,IACQ,IAAbA,EAAK,GAEL,MAAQ1E,GACTmG,GAAO,EAER,OAAOA,mCCtCR,IAAIH,EAAgC,oBAAhBL,YAA+BA,YAAc,KAKjEN,EAAOjE,QAAU4E,sCCOjB,IAAIJ,EAAwBL,EAAS,OAKrCF,EAAOjE,QAAUwE,sCCjBjB,IAAIsB,EAAgB3B,EAAS,OACzB4B,EAAa5B,EAAS,OACtB6B,EAAoB7B,EAAS,MA0CjCF,EAAOjE,QA5BP,WACC,IAAI+E,EACAzB,EAEJ,GAAkC,oBAAtB0C,EACX,OAAO,EAGR,IAEC1C,EAAM,IAAI0C,EADV1C,EAAM,CAAE,EAAG,MAAO,KAAMyC,EAAW,EAAGA,EAAW,IAEjDhB,EACCe,EAAexC,IACF,IAAbA,EAAK,IACQ,IAAbA,EAAK,IACLA,EAAK,KAAQyC,EAAW,GACX,IAAbzC,EAAK,IACQ,IAAbA,EAAK,GAEL,MAAQ1E,GACTmG,GAAO,EAER,OAAOA,kCCtCR,IAAIH,EAAgC,oBAAhBH,YAA+BA,YAAc,KAKjER,EAAOjE,QAAU4E,sCCOjB,IAAIF,EAAuBP,EAAS,OAKpCF,EAAOjE,QAAU0E,sCCjBjB,IAAIuB,EAAe9B,EAAS,OACxB+B,EAAY/B,EAAS,OACrBgC,EAAmBhC,EAAS,OA0ChCF,EAAOjE,QA5BP,WACC,IAAI+E,EACAzB,EAEJ,GAAiC,oBAArB6C,EACX,OAAO,EAGR,IAEC7C,EAAM,IAAI6C,EADV7C,EAAM,CAAE,EAAG,MAAO,KAAM4C,EAAU,EAAGA,EAAU,IAE/CnB,EACCkB,EAAc3C,IACD,IAAbA,EAAK,IACQ,IAAbA,EAAK,IACLA,EAAK,KAAQ4C,EAAU,GACV,IAAb5C,EAAK,IACQ,IAAbA,EAAK,GAEL,MAAQ1E,GACTmG,GAAO,EAER,OAAOA,mCCtCR,IAAIH,EAA+B,oBAAfD,WAA8BA,WAAa,KAK/DV,EAAOjE,QAAU4E,sCCUjB,IAAIC,EAAiBV,EAAS,OAK9BF,EAAOjE,QAAU6E,sCCpBjB,IAAIuB,EAAcjC,EAAS,OAKvBkC,EAA4C,oBAAjBrC,aA6B/BC,EAAOjE,QAVP,SAAyBZ,GACxB,OACGiH,GAAmBjH,aAAiB4E,cACb,0BAAzBoC,EAAahH,wCC3Bf,IAAIuF,EAAaR,EAAS,OAMtBmC,EAAQ,CACX,OANiBnC,EAAS,OAO1B,MAASQ,GAMVV,EAAOjE,QAAUsG,sCCFjB,IAAIC,EAAmBpC,EAAS,OAKhCF,EAAOjE,QAAUuG,sCCjBjB,IAKIxB,EALAuB,EAAQnC,EAAS,OA2CrBY,EAvBA,WACC,IAAIyB,EAgBJ,OAbAA,EAAa,IAAIF,EAAK,OAAc,IAOxB,GAAM,KAMU,KAHhB,IAAIA,EAAK,MAAaE,EAAWC,QAGzB,GAMdC,GAKPzC,EAAOjE,QAAU+E,sCCjCjB,IAAIY,EAAgBxB,EAAS,OAK7BF,EAAOjE,QAAU2F,sCCpBjB,IAAIS,EAAcjC,EAAS,OAKvBwC,EAA0C,oBAAhBpC,YA6B9BN,EAAOjE,QAVP,SAAwBZ,GACvB,OACGuH,GAAkBvH,aAAiBmF,aACZ,yBAAzB6B,EAAahH,wCCZf,IAAI0G,EAAgB3B,EAAS,OAK7BF,EAAOjE,QAAU8F,sCCpBjB,IAAIM,EAAcjC,EAAS,OAKvByC,EAA0C,oBAAhBnC,YA6B9BR,EAAOjE,QAVP,SAAwBZ,GACvB,OACGwH,GAAkBxH,aAAiBqF,aACZ,yBAAzB2B,EAAahH,wCCZf,IAAI6G,EAAe9B,EAAS,OAK5BF,EAAOjE,QAAUiG,sCCpBjB,IAAIG,EAAcjC,EAAS,OAKvB0C,EAAwC,oBAAflC,WA6B7BV,EAAOjE,QAVP,SAAuBZ,GACtB,OACGyH,GAAiBzH,aAAiBuF,YACX,wBAAzByB,EAAahH,oCCQf6E,EAAOjE,QALqB,qCCG5BiE,EAAOjE,QAL+B,2CCGtCiE,EAAOjE,SALoC,qCCK3CiE,EAAOjE,QAL0B,qCCKjCiE,EAAOjE,SALoC,uCCf3C,IAqBI8G,EArBS3C,EAAS,MAqBI4C,kBAK1B9C,EAAOjE,QAAU8G,kCCTjB,IAAIE,EAAeC,OAAOC,kBAK1BjD,EAAOjE,QAAUgH,kCCMjB/C,EAAOjE,QALuB,uDCI9BiE,EAAOjE,QALU,sCCKjBiE,EAAOjE,QALU,2CCKjBiE,EAAOjE,QALS,wCCZhB,IAAImH,EAAahD,EAAS,OAK1BF,EAAOjE,QAAUmH,sCC1BjB,IAAIC,EAAOjD,EAAS,OAChBkD,EAAOlD,EAAS,KAkCpBF,EAAOjE,QAPP,SAAqBsH,GACpB,OAAQA,IAAMF,GAAQE,IAAMD,uCCd7B,IAAIE,EAAQpD,EAAS,OAKrBF,EAAOjE,QAAUuH,kCCCjBtD,EAAOjE,QAPP,SAAgBsH,GACf,OAASA,IAAMA,sCCShB,IAAIE,EAAMrD,EAAS,OAKnBF,EAAOjE,QAAUwH,kCCIjBvD,EAAOjE,QAPP,SAAcsH,GACb,OAAOlE,KAAKoE,IAAKF,uCCHlB,IAAI1C,EAAOT,EAAS,OAKpBF,EAAOjE,QAAU4E,sCC7BjB,IAAI6C,EAAUtD,EAAS,OACnBuD,EAAcvD,EAAS,OACvBwD,EAAYxD,EAAS,OAYrByD,EAAQ,CAAE,EAAG,GA2DjB3D,EAAOjE,QA3BP,SAAmBsH,EAAGO,GACrB,IAAIC,EACAC,EAmBJ,OAhBAN,EAASG,EAAON,GAChBQ,EAAKF,EAAO,GAGZE,GA5CoB,WA+CpBC,EAAKL,EAAaG,GASXF,EAHPG,GAHAC,GArDe,WA2DOH,EAAO,yCCrC9B,IAAII,EAAQ7D,EAAS,OAKrBF,EAAOjE,QAAUgI,sCC5BjB,IAAIZ,EAAOjD,EAAS,OAChBkD,EAAOlD,EAAS,KAChB8D,EAAO9D,EAAS,OAChB+D,EAAe/D,EAAS,OACxBgE,EAAyBhE,EAAS,OAClCiE,EAAyBjE,EAAS,OAClCoD,EAAQpD,EAAS,OACjBgD,EAAahD,EAAS,OACtBkE,EAAWlE,EAAS,MACpBmE,EAAYnE,EAAS,OACrBoE,EAAWpE,EAAS,OACpBsD,EAAUtD,EAAS,OACnBwD,EAAYxD,EAAS,OAYrBqE,EAAO,CAAE,EAAK,GAGdZ,EAAQ,CAAE,EAAG,GA4FjB3D,EAAOjE,QApDP,SAAgByI,EAAMC,GACrB,IAAIC,EACAC,EACJ,OACU,IAATH,GACAlB,EAAOkB,IACPtB,EAAYsB,GAELA,GAGRH,EAAWE,EAAMC,GAEjBC,GAAOF,EAAM,IAGbE,GAAOH,EAJPE,EAAOD,EAAM,KAOFJ,EACHC,EAAU,EAAKI,GAElBC,EAAMR,EACLO,EAAO,EACJpB,EAEDD,GAGHsB,GAAOP,GACXO,GAAO,GACPE,EAhFc,sBAkFdA,EAAI,EAGLnB,EAASG,EAAOa,GAChBE,EAAOf,EAAO,GAGde,GAtFoB,WA4FbC,EAAIjB,EAHXgB,GAAUD,EAAIT,GAAS,GAGKL,EAAO,0CC5GpC,IAAIX,EAAS9C,EAAS,OAKtBF,EAAOjE,QAAUiH,kCCjBjBhD,EAAOjE,QAAUiH,2CCqBjB,IAAIrE,EAAWuB,EAAS,OAKxBF,EAAOjE,QAAU4C,sCC1BjB,IAAI8E,EAAcvD,EAAS,OACvB0E,EAAW1E,EAAS,OACpB8D,EAAO9D,EAAS,OAyCpBF,EAAOjE,QAdP,SAAmBsH,GAElB,IAAIqB,EAAOjB,EAAaJ,GAMxB,OAHAqB,GAASA,EAAOE,KAAe,IAGhBZ,EAAM,uCCPtB,IAAIN,EAAYxD,EAAS,OAKzBF,EAAOjE,QAAU2H,qCCnCjB,IAKImB,EACAC,EACAC,GAEoB,IATH7E,EAAS,QAU7B4E,EAAO,EACPC,EAAM,IAEND,EAAO,EACPC,EAAM,GAEPF,EAAU,CACT,KAAQC,EACR,IAAOC,GAMR/E,EAAOjE,QAAU8I,sCCxBjB,IAAIrE,EAAcN,EAAS,OACvBH,EAAeG,EAAS,OACxB2E,EAAU3E,EAAS,MAKnB8E,EAAe,IAAIjF,EAAc,GACjCkF,EAAc,IAAIzE,EAAawE,EAAaxC,QAE5CsC,EAAOD,EAAQC,KACfC,EAAMF,EAAQE,IAwFlB/E,EAAOjE,QATP,SAAoB2I,EAAMQ,GAGzB,OAFAD,EAAaH,GAASJ,EACtBO,EAAaF,GAAQG,EACdF,EAAc,uCC7FtB,IAKIF,EAEHA,GADuB,IANH5E,EAAS,OAOtB,EAEA,EAMRF,EAAOjE,QAAU+I,sCCHjB,IAAIrB,EAAcvD,EAAS,OAK3BF,EAAOjE,QAAU0H,sCCjBjB,IAAIjD,EAAcN,EAAS,OACvBH,EAAeG,EAAS,OACxB4E,EAAO5E,EAAS,MAKhB8E,EAAe,IAAIjF,EAAc,GACjCkF,EAAc,IAAIzE,EAAawE,EAAaxC,QA6DhDxC,EAAOjE,QARP,SAAsBsH,GAErB,OADA2B,EAAc,GAAM3B,EACb4B,EAAaH,wCChCrB,IAAIT,EAAYnE,EAAS,OAKzBF,EAAOjE,QAAUsI,sCCpCjB,IAAIc,EAAMjF,EAAS,OA8DnBF,EAAOjE,QAVP,SAAoBqJ,EAAK/B,GACxB,OAA0B,IAArBgC,UAAUjN,OACP+M,EAAK,CAAE,EAAK,GAAKC,GAElBD,EAAKC,EAAK/B,wCCxDlB,IAAIiC,EAA0BpF,EAAS,OACnCgD,EAAahD,EAAS,OACtBoD,EAAQpD,EAAS,OACjBqD,EAAMrD,EAAS,MAkEnBF,EAAOjE,QAnBP,SAAoBqJ,EAAK/B,GACxB,OAAKC,EAAOD,IAAOH,EAAYG,IAC9B+B,EAAK,GAAM/B,EACX+B,EAAK,GAAM,EACJA,GAEG,IAAN/B,GAAaE,EAAKF,GAAMiC,GAC5BF,EAAK,GAhDM,iBAgDA/B,EACX+B,EAAK,IAAO,GACLA,IAERA,EAAK,GAAM/B,EACX+B,EAAK,GAAM,EACJA,wCCvCR,IAAI5B,EAAUtD,EAAS,OAKvBF,EAAOjE,QAAUyH,sCC7BjB,IAKIqB,EACAC,EACAC,GAEoB,IATH7E,EAAS,QAU7B4E,EAAO,EACPC,EAAM,IAEND,EAAO,EACPC,EAAM,GAEPF,EAAU,CACT,KAAQC,EACR,IAAOC,GAMR/E,EAAOjE,QAAU8I,sCCxBjB,IAAIM,EAAMjF,EAAS,OAqCnBF,EAAOjE,QAVP,SAAkBqJ,EAAK/B,GACtB,OAA0B,IAArBgC,UAAUjN,OACP+M,EAAK,CAAE,EAAG,GAAKC,GAEhBD,EAAKC,EAAK/B,wCC/BlB,IAAI7C,EAAcN,EAAS,OACvBH,EAAeG,EAAS,OACxB2E,EAAU3E,EAAS,OAKnB8E,EAAe,IAAIjF,EAAc,GACjCkF,EAAc,IAAIzE,EAAawE,EAAaxC,QAE5CsC,EAAOD,EAAQC,KACfC,EAAMF,EAAQE,IAyElB/E,EAAOjE,QAVP,SAAkBqJ,EAAK/B,GAItB,OAHA2B,EAAc,GAAM3B,EACpB+B,EAAK,GAAMH,EAAaH,GACxBM,EAAK,GAAMH,EAAaF,GACjBK,uCCzDR,IAOIjD,EAPAoD,EAAiBrF,EAAS,OAC1BC,EAAUD,EAAS,OACnBE,EAAWF,EAAS,OAOvBiC,EADIoD,IACUnF,EAEAD,EAMfH,EAAOjE,QAAUoG,sCCtCjB,IAAIqD,EAAQtF,EAAS,OAiCrBF,EAAOjE,QAPP,SAAsB0J,GACrB,OAAOD,EAAMrE,KAAMsE,wCC3BpB,IAAI1E,EAAab,EAAS,OACtBuB,EAAcvB,EAAS,OACvBsF,EAAQtF,EAAS,OAwDrBF,EAAOjE,QA9BP,SAAsB0J,GACrB,IAAIC,EACAC,EACAP,EAEJ,GAAW,OAANK,QAAoB,IAANA,EAClB,OAAOD,EAAMrE,KAAMsE,GAEpBE,EAAMF,EAAGhE,GACTiE,EAAQ3E,EAAY0E,EAAGhE,GAGvB,IACCgE,EAAGhE,QAAgB,EAClB,MAAQ9G,GACT,OAAO6K,EAAMrE,KAAMsE,GASpB,OAPAL,EAAMI,EAAMrE,KAAMsE,GAEbC,EACJD,EAAGhE,GAAgBkE,SAEZF,EAAGhE,GAEJ2D,mCCpDR,IAAII,EAAQlN,OAAO2I,UAAU2E,SAK7B5F,EAAOjE,QAAUyJ,kCCLjB,IAAIK,EAA+B,oBAAXxE,OAA0BA,OAAOI,YAAc,GAKvEzB,EAAOjE,QAAU8J,+BC3BF,SAAaxN,EAAKwE,EAAKiJ,EAAKC,EAAGC,GAAAA,IAC7CnJ,EAAMA,EAAIY,MAAQZ,EAAIY,MAAM,KAAOZ,EAC9BkJ,EAAI,EAAGA,EAAIlJ,EAAIzE,OAAQ2N,IAC3B1N,EAAMA,EAAMA,EAAIwE,EAAIkJ,IAAMC,EAAAA,OAEpB3N,IAAQ2N,EAAQF,EAAMzN,wBCK9B0D,EAAQgC,KAVR,SAAc1F,EAAK4N,EAAMlH,GACxBkH,EAAKxI,QAAUwI,EAAKA,EAAKxI,MAAM,MAE/B,IADA,IAA+B4F,EAAGlG,EAA9BhF,EAAE,EAAG+N,EAAED,EAAK7N,OAAQqC,EAAEpC,EACnBF,EAAI+N,GAEA,eADV/I,EAAI8I,EAAK9N,OACsB,gBAANgF,GAA6B,cAANA,GAChD1C,EAAIA,EAAE0C,GAAMhF,IAAM+N,EAAKnH,SAAcsE,EAAE5I,EAAE0C,aAAa8I,EAAS5C,EAAa,EAAR4C,EAAK9N,KAAS,KAAS,GAAG8N,EAAK9N,IAAI4B,QAAQ,KAAQ,GAAK,qFCH9H,IAFA,IAAIoD,EAAI,GAAIhF,EAAI,EAETA,EAAI,IACTgF,EAAEhF,GAAK,EAA8B,WAA1BgH,KAAKgH,MAAMhO,EAAIgH,KAAKiH,IAIlB,SAAS,EAAIC,GAAAA,IACtBC,EAAGC,EAAGC,EACRC,EAAI,CAAEH,EAAI,WAAYC,EAAI,YAAaD,GAAIC,GAC3CG,EAAQ,GACRC,EAAIC,SAASC,UAAUR,IAAM,OAC7BS,EAAIH,EAAEvO,OAAAA,IAERiO,IAAOS,EAAI,EAAI,EAAK,GAGpBJ,IAAQL,GAAS,EAAJS,GAELA,GACNJ,EAAMI,GAAK,IAAMH,EAAEI,WAAWD,IAAM,EAAIA,IAAAA,IAIrC3O,EAAIwO,EAAI,EAAGxO,EAAIkO,EAAGlO,GAAK,GAAI,KAC9B2O,EAAIL,EAEGE,EAAI,GACTG,EAAI,CACFN,EAAIM,EAAE,GAEJR,IACEE,EACAM,EAAE,GACF,CACER,EAAIC,GAAKD,EAAIE,EACbA,EAAIF,GAAKE,EAAID,EACbD,EAAIC,EAAIC,EACRD,GAAKD,GAAKE,IACVM,EAAIH,GAAK,GACXxJ,EAAEwJ,KACAD,EAAMvO,EAKD,GALK,CACVwO,EACA,EAAIA,EAAI,EACR,EAAIA,EAAI,EACR,EAAIA,GACJG,OACEA,EAAI,CACR,EAAG,GAAI,GAAI,GACX,EAAI,EAAG,GAAI,GACX,EAAG,GAAI,GAAI,GACX,EAAG,GAAI,GAAI,IACX,EAAIA,EAAIH,IAAM,IAAMH,KAAOM,GAE/BR,EACAC,GAGFD,EAAW,EAAPQ,EAAE,GACNP,EAAIO,EAAE,OAIHH,EAAI,EAAGA,GAAIF,IAAIE,IAAMG,EAAEH,GAAAA,IAKzBN,EAAI,GAAIM,EAAI,IACfN,IAAOI,EAAEE,GAAK,IAAmB,GAAX,EAAIA,KAAa,IAAIf,SAAS,WAI/CS","sources":["../node_modules/@segment/analytics-next/src/plugins/routing-middleware/index.ts","../node_modules/@segment/tsub/src/index.ts","../node_modules/@segment/tsub/src/matchers.ts","../node_modules/@segment/tsub/src/store.ts","../node_modules/@segment/tsub/src/transformers.ts","../node_modules/@segment/tsub/src/unset.ts","../node_modules/@stdlib/array-float64/lib/float64array.js","../node_modules/@stdlib/array-float64/lib/index.js","../node_modules/@stdlib/array-float64/lib/polyfill.js","../node_modules/@stdlib/array-uint16/lib/index.js","../node_modules/@stdlib/array-uint16/lib/polyfill.js","../node_modules/@stdlib/array-uint16/lib/uint16array.js","../node_modules/@stdlib/array-uint32/lib/index.js","../node_modules/@stdlib/array-uint32/lib/polyfill.js","../node_modules/@stdlib/array-uint32/lib/uint32array.js","../node_modules/@stdlib/array-uint8/lib/index.js","../node_modules/@stdlib/array-uint8/lib/polyfill.js","../node_modules/@stdlib/array-uint8/lib/uint8array.js","../node_modules/@stdlib/assert-has-float64array-support/lib/float64array.js","../node_modules/@stdlib/assert-has-float64array-support/lib/index.js","../node_modules/@stdlib/assert-has-float64array-support/lib/main.js","../node_modules/@stdlib/assert-has-own-property/lib/index.js","../node_modules/@stdlib/assert-has-own-property/lib/main.js","../node_modules/@stdlib/assert-has-symbol-support/lib/index.js","../node_modules/@stdlib/assert-has-symbol-support/lib/main.js","../node_modules/@stdlib/assert-has-tostringtag-support/lib/index.js","../node_modules/@stdlib/assert-has-tostringtag-support/lib/main.js","../node_modules/@stdlib/assert-has-uint16array-support/lib/index.js","../node_modules/@stdlib/assert-has-uint16array-support/lib/main.js","../node_modules/@stdlib/assert-has-uint16array-support/lib/uint16array.js","../node_modules/@stdlib/assert-has-uint32array-support/lib/index.js","../node_modules/@stdlib/assert-has-uint32array-support/lib/main.js","../node_modules/@stdlib/assert-has-uint32array-support/lib/uint32array.js","../node_modules/@stdlib/assert-has-uint8array-support/lib/index.js","../node_modules/@stdlib/assert-has-uint8array-support/lib/main.js","../node_modules/@stdlib/assert-has-uint8array-support/lib/uint8array.js","../node_modules/@stdlib/assert-is-float64array/lib/index.js","../node_modules/@stdlib/assert-is-float64array/lib/main.js","../node_modules/@stdlib/assert-is-little-endian/lib/ctors.js","../node_modules/@stdlib/assert-is-little-endian/lib/index.js","../node_modules/@stdlib/assert-is-little-endian/lib/main.js","../node_modules/@stdlib/assert-is-uint16array/lib/index.js","../node_modules/@stdlib/assert-is-uint16array/lib/main.js","../node_modules/@stdlib/assert-is-uint32array/lib/index.js","../node_modules/@stdlib/assert-is-uint32array/lib/main.js","../node_modules/@stdlib/assert-is-uint8array/lib/index.js","../node_modules/@stdlib/assert-is-uint8array/lib/main.js","../node_modules/@stdlib/constants-float64-exponent-bias/lib/index.js","../node_modules/@stdlib/constants-float64-high-word-exponent-mask/lib/index.js","../node_modules/@stdlib/constants-float64-max-base2-exponent-subnormal/lib/index.js","../node_modules/@stdlib/constants-float64-max-base2-exponent/lib/index.js","../node_modules/@stdlib/constants-float64-min-base2-exponent-subnormal/lib/index.js","../node_modules/@stdlib/constants-float64-ninf/lib/index.js","../node_modules/@stdlib/constants-float64-pinf/lib/index.js","../node_modules/@stdlib/constants-float64-smallest-normal/lib/index.js","../node_modules/@stdlib/constants-uint16-max/lib/index.js","../node_modules/@stdlib/constants-uint32-max/lib/index.js","../node_modules/@stdlib/constants-uint8-max/lib/index.js","../node_modules/@stdlib/math-base-assert-is-infinite/lib/index.js","../node_modules/@stdlib/math-base-assert-is-infinite/lib/main.js","../node_modules/@stdlib/math-base-assert-is-nan/lib/index.js","../node_modules/@stdlib/math-base-assert-is-nan/lib/main.js","../node_modules/@stdlib/math-base-special-abs/lib/index.js","../node_modules/@stdlib/math-base-special-abs/lib/main.js","../node_modules/@stdlib/math-base-special-copysign/lib/index.js","../node_modules/@stdlib/math-base-special-copysign/lib/main.js","../node_modules/@stdlib/math-base-special-ldexp/lib/index.js","../node_modules/@stdlib/math-base-special-ldexp/lib/ldexp.js","../node_modules/@stdlib/number-ctor/lib/index.js","../node_modules/@stdlib/number-ctor/lib/number.js","../node_modules/@stdlib/number-float64-base-exponent/lib/index.js","../node_modules/@stdlib/number-float64-base-exponent/lib/main.js","../node_modules/@stdlib/number-float64-base-from-words/lib/index.js","../node_modules/@stdlib/number-float64-base-from-words/lib/indices.js","../node_modules/@stdlib/number-float64-base-from-words/lib/main.js","../node_modules/@stdlib/number-float64-base-get-high-word/lib/high.js","../node_modules/@stdlib/number-float64-base-get-high-word/lib/index.js","../node_modules/@stdlib/number-float64-base-get-high-word/lib/main.js","../node_modules/@stdlib/number-float64-base-normalize/lib/index.js","../node_modules/@stdlib/number-float64-base-normalize/lib/main.js","../node_modules/@stdlib/number-float64-base-normalize/lib/normalize.js","../node_modules/@stdlib/number-float64-base-to-words/lib/index.js","../node_modules/@stdlib/number-float64-base-to-words/lib/indices.js","../node_modules/@stdlib/number-float64-base-to-words/lib/main.js","../node_modules/@stdlib/number-float64-base-to-words/lib/to_words.js","../node_modules/@stdlib/utils-native-class/lib/index.js","../node_modules/@stdlib/utils-native-class/lib/native_class.js","../node_modules/@stdlib/utils-native-class/lib/polyfill.js","../node_modules/@stdlib/utils-native-class/lib/tostring.js","../node_modules/@stdlib/utils-native-class/lib/tostringtag.js","../node_modules/dlv/index.js","../node_modules/dset/dist/index.js","../node_modules/tiny-hashes/md5/md5.js"],"sourcesContent":["import * as tsub from '@segment/tsub'\nimport { Matcher, Rule } from '@segment/tsub/dist/store'\nimport { DestinationMiddlewareFunction } from '../middleware'\n\n// TODO: update tsub definition\ntype RoutingRuleMatcher = Matcher & {\n  config?: {\n    expr: string\n  }\n}\n\nexport type RoutingRule = Rule & {\n  matchers: RoutingRuleMatcher[]\n}\n\nexport const tsubMiddleware =\n  (rules: RoutingRule[]): DestinationMiddlewareFunction =>\n  ({ payload, integration, next }): void => {\n    const store = new tsub.Store(rules)\n    const rulesToApply = store.getRulesByDestinationName(integration)\n\n    rulesToApply.forEach((rule) => {\n      const { matchers, transformers } = rule\n\n      for (let i = 0; i < matchers.length; i++) {\n        if (tsub.matches(payload.obj, matchers[i])) {\n          payload.obj = tsub.transform(payload.obj, transformers[i])\n\n          if (payload.obj === null) {\n            return next(null)\n          }\n        }\n      }\n    })\n\n    next(payload)\n  }\n","export { default as transform } from './transformers'\nexport { default as matches } from './matchers'\nexport { default as Store } from './store'\n","import * as Store from './store'\nimport get from 'dlv'\n\nexport default function matches(event, matcher: Store.Matcher): boolean {\n  if (!matcher) {\n    throw new Error('No matcher supplied!')\n  }\n\n  switch (matcher.type) {\n    case 'all':\n      return all()\n    case 'fql':\n      return fql(matcher.ir, event)\n    default:\n      throw new Error(`Matcher of type ${matcher.type} unsupported.`)\n  }\n}\n\nfunction all(): boolean {\n  return true\n}\n\nfunction fql(ir: Store.Matcher['ir'], event): boolean {\n  if (!ir) {\n    return false\n  }\n\n  try {\n    ir = JSON.parse(ir)\n  } catch (e) {\n    throw new Error(`Failed to JSON.parse FQL intermediate representation \"${ir}\": ${e}`)\n  }\n\n  const result = fqlEvaluate(ir, event)\n  if (typeof result !== 'boolean') {\n    // An error was returned, or a lowercase, typeof, or similar function was run alone. Nothing to evaluate.\n    return false\n  }\n\n  return result\n}\n\n// FQL is 100% type strict in Go. Show no mercy to types which do not comply.\nfunction fqlEvaluate(ir, event) {\n  // If the given ir chunk is not an array, then we should check the single given path or value for literally `true`.\n  if (!Array.isArray(ir)) {\n    return getValue(ir, event) === true\n  }\n\n  // Otherwise, it is a sequence of ordered steps to follow to reach our solution!\n  const item = ir[0]\n  switch (item) {\n    /*** Unary cases ***/\n    // '!' => Invert the result\n    case '!':\n      return !fqlEvaluate(ir[1], event)\n\n    /*** Binary cases ***/\n    // 'or' => Any condition being true returns true\n    case 'or':\n      for (let i = 1; i < ir.length; i++) {\n        if (fqlEvaluate(ir[i], event)) {\n          return true\n        }\n      }\n      return false\n    // 'and' => Any condition being false returns false\n    case 'and':\n      for (let i = 1; i < ir.length; i++) {\n        if (!fqlEvaluate(ir[i], event)) {\n          return false\n        }\n      }\n      return true\n    // Equivalence comparisons\n    case '=':\n    case '!=':\n      return compareItems(getValue(ir[1], event), getValue(ir[2], event), item, event)\n    // Numerical comparisons\n    case '<=':\n    case '<':\n    case '>':\n    case '>=':\n      // Compare the two values with the given operator.\n      return compareNumbers(getValue(ir[1], event), getValue(ir[2], event), item, event)\n    // item in [list]' => Checks whether item is in list\n    case 'in':\n      return checkInList(getValue(ir[1], event), getValue(ir[2], event), event)\n\n    /*** Functions ***/\n    // 'contains(str1, str2)' => The first string has a substring of the second string\n    case 'contains':\n      return contains(getValue(ir[1], event), getValue(ir[2], event))\n    // 'match(str, match)' => The given string matches the provided glob matcher\n    case 'match':\n      return match(getValue(ir[1], event), getValue(ir[2], event))\n    // 'lowercase(str)' => Returns a lowercased string, null if the item is not a string\n    case 'lowercase':\n      const target = getValue(ir[1], event)\n      if (typeof target !== 'string') {\n        return null\n      }\n      return target.toLowerCase()\n    // 'typeof(val)' => Returns the FQL type of the value\n    case 'typeof':\n      // TODO: Do we need mapping to allow for universal comparisons? e.g. Object -> JSON, Array -> List, Floats?\n      return typeof getValue(ir[1], event)\n    // 'length(val)' => Returns the length of an array or string, NaN if neither\n    case 'length':\n      return length(getValue(ir[1], event))\n    // If nothing hit, we or the IR messed up somewhere.\n    default:\n      throw new Error(`FQL IR could not evaluate for token: ${item}`)\n  }\n}\n\nfunction getValue(item, event) {\n  // If item is an array, leave it as-is.\n  if (Array.isArray(item)) {\n    return item\n  }\n\n  // If item is an object, it has the form of `{\"value\": VAL}`\n  if (typeof item === 'object') {\n    return item.value\n  }\n\n  // Otherwise, it's an event path, e.g. \"properties.email\"\n  return get(event, item)\n}\n\nfunction checkInList(item, list, event): boolean {\n  return list.find(it => getValue(it, event) === item) !== undefined\n}\n\nfunction compareNumbers(first, second, operator, event): boolean {\n  // Check if it's more IR (such as a length() function)\n  if (isIR(first)) {\n    first = fqlEvaluate(first, event)\n  }\n\n  if (isIR(second)) {\n    second = fqlEvaluate(second, event)\n  }\n\n  if (typeof first !== 'number' || typeof second !== 'number') {\n    return false\n  }\n\n  // Reminder: NaN is not comparable to any other number (including NaN) and will always return false as desired.\n  switch (operator) {\n    // '<=' => The first number is less than or equal to the second.\n    case '<=':\n      return first <= second\n    // '>=' => The first number is greater than or equal to the second\n    case '>=':\n      return first >= second\n    // '<' The first number is less than the second.\n    case '<':\n      return first < second\n    // '>' The first number is greater than the second.\n    case '>':\n      return first > second\n    default:\n      throw new Error(`Invalid operator in compareNumbers: ${operator}`)\n  }\n}\n\nfunction compareItems(first, second, operator, event): boolean {\n  // Check if it's more IR (such as a lowercase() function)\n  if (isIR(first)) {\n    first = fqlEvaluate(first, event)\n  }\n\n  if (isIR(second)) {\n    second = fqlEvaluate(second, event)\n  }\n\n  if (typeof first === 'object' && typeof second === 'object') {\n    first = JSON.stringify(first)\n    second = JSON.stringify(second)\n  }\n\n  // Objects with the exact same contents AND order ARE considered identical. (Don't compare by reference)\n  // Even in Go, this MUST be the same byte order.\n  // e.g. {a: 1, b:2} === {a: 1, b:2} BUT {a:1, b:2} !== {b:2, a:1}\n  // Maybe later we'll use a stable stringifier, but we're matching server-side behavior for now.\n  switch (operator) {\n    // '=' => The two following items are exactly identical\n    case '=':\n      return first === second\n    // '!=' => The two following items are NOT exactly identical.\n    case '!=':\n      return first !== second\n    default:\n      throw new Error(`Invalid operator in compareItems: ${operator}`)\n  }\n}\n\nfunction contains(first, second): boolean {\n  if (typeof first !== 'string' || typeof second !== 'string') {\n    return false\n  }\n\n  return first.indexOf(second) !== -1\n}\n\nfunction match(str, glob): boolean {\n  if (typeof str !== 'string' || typeof glob !== 'string') {\n    return false\n  }\n\n  return globMatches(glob, str)\n}\n\nfunction length(item) {\n  // Match server-side behavior.\n  if (item === null) {\n    return 0\n  }\n\n  // Type-check to avoid returning .length of an object\n  if (!Array.isArray(item) && typeof item !== 'string') {\n    return NaN\n  }\n\n  return item.length\n}\n\n// This is a heuristic technically speaking, but should be close enough. The odds of someone trying to test\n// a func with identical IR notation is pretty low.\nfunction isIR(value): boolean {\n  // TODO: This can be better checked by checking if this is a {\"value\": THIS}\n  if (!Array.isArray(value)) {\n    return false\n  }\n\n  // Function checks\n  if (\n    (value[0] === 'lowercase' || value[0] === 'length' || value[0] === 'typeof') &&\n    value.length === 2\n  ) {\n    return true\n  }\n\n  if ((value[0] === 'contains' || value[0] === 'match') && value.length === 3) {\n    return true\n  }\n\n  return false\n}\n\n// Any reputable glob matcher is designed to work on filesystems and doesn't allow the override of the separator\n// character \"/\". This is problematic since our server-side representation e.g. evaluates \"match('ab/c', 'a*)\"\n// as TRUE, whereas any glob matcher for JS available does false. So we're rewriting it here.\n// See: https://github.com/segmentio/glob/blob/master/glob.go\nfunction globMatches(pattern, str): boolean {\n  Pattern: while (pattern.length > 0) {\n    let star\n    let chunk\n    ;({ star, chunk, pattern } = scanChunk(pattern))\n    if (star && chunk === '') {\n      // Trailing * matches rest of string\n      return true\n    }\n\n    // Look for match at current position\n    let { t, ok, err } = matchChunk(chunk, str)\n    if (err) {\n      return false\n    }\n\n    // If we're the last chunk, make sure we've exhausted the str\n    // otherwise we'll give a false result even if we could still match\n    // using the star\n    if (ok && (t.length === 0 || pattern.length > 0)) {\n      str = t\n      continue\n    }\n\n    if (star) {\n      // Look for match, skipping i+1 bytes.\n      for (let i = 0; i < str.length; i++) {\n        ;({ t, ok, err } = matchChunk(chunk, str.slice(i + 1)))\n        if (ok) {\n          // If we're the last chunk, make sure we exhausted the str.\n          if (pattern.length === 0 && t.length > 0) {\n            continue\n          }\n\n          str = t\n          continue Pattern\n        }\n\n        if (err) {\n          return false\n        }\n      }\n    }\n\n    return false\n  }\n\n  return str.length === 0\n}\n\nfunction scanChunk(pattern): any {\n  const result = {\n    star: false,\n    chunk: '',\n    pattern: '',\n  }\n\n  while (pattern.length > 0 && pattern[0] === '*') {\n    pattern = pattern.slice(1)\n    result.star = true\n  }\n\n  let inRange = false\n  let i\n\n  Scan: for (i = 0; i < pattern.length; i++) {\n    switch (pattern[i]) {\n      case '\\\\':\n        // Error check handled in matchChunk: bad pattern.\n        if (i + 1 < pattern.length) {\n          i++\n        }\n        break\n      case '[':\n        inRange = true\n        break\n      case ']':\n        inRange = false\n        break\n      case '*':\n        if (!inRange) {\n          break Scan\n        }\n    }\n  }\n\n  result.chunk = pattern.slice(0, i)\n  result.pattern = pattern.slice(i)\n  return result\n}\n\n// matchChunk checks whether chunk matches the beginning of s.\n// If so, it returns the remainder of s (after the match).\n// Chunk is all single-character operators: literals, char classes, and ?.\nfunction matchChunk(chunk, str): any {\n  const result = {\n    t: '',\n    ok: false,\n    err: false,\n  }\n\n  while (chunk.length > 0) {\n    if (str.length === 0) {\n      return result\n    }\n\n    switch (chunk[0]) {\n      case '[':\n        const char = str[0]\n        str = str.slice(1)\n        chunk = chunk.slice(1)\n\n        let notNegated = true\n        if (chunk.length > 0 && chunk[0] === '^') {\n          notNegated = false\n          chunk = chunk.slice(1)\n        }\n\n        // Parse all ranges\n        let foundMatch = false\n        let nRange = 0\n        while (true) {\n          if (chunk.length > 0 && chunk[0] === ']' && nRange > 0) {\n            chunk = chunk.slice(1)\n            break\n          }\n\n          let lo = ''\n          let hi = ''\n          let err\n          ;({ char: lo, newChunk: chunk, err } = getEsc(chunk))\n          if (err) {\n            return result\n          }\n\n          hi = lo\n          if (chunk[0] === '-') {\n            ;({ char: hi, newChunk: chunk, err } = getEsc(chunk.slice(1)))\n            if (err) {\n              return result\n            }\n          }\n\n          if (lo <= char && char <= hi) {\n            foundMatch = true\n          }\n\n          nRange++\n        }\n\n        if (foundMatch !== notNegated) {\n          return result\n        }\n        break\n      case '?':\n        str = str.slice(1)\n        chunk = chunk.slice(1)\n        break\n      case '\\\\':\n        chunk = chunk.slice(1)\n        if (chunk.length === 0) {\n          result.err = true\n          return result\n        }\n      // Fallthrough, missing break intentional.\n      default:\n        if (chunk[0] !== str[0]) {\n          return result\n        }\n        str = str.slice(1)\n        chunk = chunk.slice(1)\n    }\n  }\n\n  result.t = str\n  result.ok = true\n  result.err = false\n  return result\n}\n\n// getEsc gets a possibly-escaped character from chunk, for a character class.\nfunction getEsc(chunk): any {\n  const result = {\n    char: '',\n    newChunk: '',\n    err: false,\n  }\n\n  if (chunk.length === 0 || chunk[0] === '-' || chunk[0] === ']') {\n    result.err = true\n    return result\n  }\n\n  if (chunk[0] === '\\\\') {\n    chunk = chunk.slice(1)\n    if (chunk.length === 0) {\n      result.err = true\n      return result\n    }\n  }\n\n  // Unlike Go, JS strings operate on characters instead of bytes.\n  // This is why we aren't copying over the GetRuneFromString stuff.\n  result.char = chunk[0]\n  result.newChunk = chunk.slice(1)\n  if (result.newChunk.length === 0) {\n    result.err = true\n  }\n\n  return result\n}\n","import { TransformerConfig } from './transformers'\n\nexport interface Rule {\n  scope: string\n  target_type: string\n  matchers: Matcher[]\n  transformers: Transformer[][]\n  destinationName?: string\n}\n\nexport interface Matcher {\n  type: string\n  ir: string\n}\n\nexport interface Transformer {\n  type: string\n  config?: TransformerConfig\n}\n\nexport default class Store {\n  private readonly rules = []\n\n  constructor(rules?: Rule[]) {\n    this.rules = rules || []\n  }\n\n  public getRulesByDestinationName(destinationName: string): Rule[] {\n    const rules: Rule[] = []\n    for (const rule of this.rules) {\n      // Rules with no destinationName are global (workspace || workspace::source)\n      if (rule.destinationName === destinationName || rule.destinationName === undefined) {\n        rules.push(rule)\n      }\n    }\n\n    return rules\n  }\n}\n","import { Transformer } from './store'\nimport MD5 from 'tiny-hashes/md5'\nimport get from 'dlv'\nimport ldexp from '@stdlib/math-base-special-ldexp'\nimport { dset } from 'dset';\nimport { unset } from './unset'\n\nexport interface TransformerConfig {\n  allow?: Record<string, string[]>\n  drop?: Record<string, string[]>\n  sample?: TransformerConfigSample\n  map?: Record<string, TransformerConfigMap>\n}\n\nexport interface TransformerConfigSample {\n  percent: number\n  path: string\n}\n\nexport interface TransformerConfigMap {\n  set?: any\n  copy?: string\n  move?: string\n  to_string?: boolean\n}\n\nexport default function transform(payload: any, transformers: Transformer[]): any {\n  const transformedPayload: any = payload\n\n  for (const transformer of transformers) {\n    switch (transformer.type) {\n      case 'drop':\n        return null\n      case 'drop_properties':\n        dropProperties(transformedPayload, transformer.config)\n        break\n      case 'allow_properties':\n        allowProperties(transformedPayload, transformer.config)\n        break\n      case 'sample_event':\n        if (sampleEvent(transformedPayload, transformer.config)) {\n          break\n        }\n        return null\n      case 'map_properties':\n        mapProperties(transformedPayload, transformer.config)\n        break\n      case 'hash_properties':\n        // Not yet supported, but don't throw an error. Just ignore.\n        break\n      default:\n        throw new Error(`Transformer of type \"${transformer.type}\" is unsupported.`)\n    }\n  }\n\n  return transformedPayload\n}\n\n// dropProperties removes all specified props from the object.\nfunction dropProperties(payload: any, config: TransformerConfig) {\n  for (const key in config.drop) {\n    if (!config.drop.hasOwnProperty(key)) {\n      continue\n    }\n\n    // If key is empty, it refers to the top-level object.\n    const field = key === '' ? payload : get(payload, key)\n\n    // Can only drop props off of arrays and objects.\n    if (typeof field !== 'object' || field === null) {\n      continue\n    }\n\n    for (const target of config.drop[key]) {\n      delete field[target]\n    }\n  }\n}\n\n// allowProperties ONLY allows the specific targets within the keys. (e.g. \"a.foo\": [\"bar\", \"baz\"]\n// on {a: {foo: {bar: 1, baz: 2}, other: 3}} will not have any drops, as it only looks inside a.foo\nfunction allowProperties(payload: any, config: TransformerConfig) {\n  for (const key in config.allow) {\n    if (!config.allow.hasOwnProperty(key)) {\n      continue\n    }\n\n    // If key is empty, it refers to the top-level object.\n    const field = key === '' ? payload : get(payload, key)\n\n    // Can only drop props off of arrays and objects.\n    if (typeof field !== 'object' || field === null) {\n      continue\n    }\n\n    // Execution order fortunately doesn't really matter (e.g. if someone filtered off of foo.bar, then foo.bar.baz)\n    // except for micro-optimization.\n    for (const k in field) {\n      if (!field.hasOwnProperty(k)) {\n        continue\n      }\n\n      if (config.allow[key].indexOf(k) === -1) {\n        delete field[k]\n      }\n    }\n  }\n}\n\nfunction mapProperties(payload: any, config: TransformerConfig) {\n  // Some configs might try to modify or read from a field multiple times. We will only ever read\n  // values as they were before any modifications began. Thus, if you try to override e.g.\n  // {a: {b: 1}} with set(a, 'b', 2) (which results in {a: {b: 2}}) and then try to copy a.b into\n  // a.c, you will get {a: {b: 2, c:1}} and NOT {a: {b:2, c:2}}. This prevents map evaluation\n  // order from mattering, and === what server-side does.\n  // See: https://github.com/segmentio/tsub/blob/661695a63b60b90471796e667458f076af788c19/transformers/map_properties.go#L179-L200\n  const initialPayload = JSON.parse(JSON.stringify(payload))\n\n  for (const key in config.map) {\n    if (!config.map.hasOwnProperty(key)) {\n      continue\n    }\n\n    const actionMap: TransformerConfigMap = config.map[key]\n\n    // Can't manipulate non-objects. Check that the parent is one. Strip the last .field\n    // from the string.\n    const splitKey = key.split('.')\n    let parent\n    if (splitKey.length > 1) {\n      splitKey.pop()\n      parent = get(initialPayload, splitKey.join('.'))\n    } else {\n      parent = payload\n    }\n\n    if (typeof parent !== 'object') {\n      continue\n    }\n\n    // These actions are exclusive to each other.\n    if (actionMap.copy) {\n      const valueToCopy = get(initialPayload, actionMap.copy)\n      if (valueToCopy !== undefined) {\n        dset(payload, key, valueToCopy)\n      }\n    } else if (actionMap.move) {\n      const valueToMove = get(initialPayload, actionMap.move)\n      if (valueToMove !== undefined) {\n        dset(payload, key, valueToMove)\n      }\n\n      unset(payload, actionMap.move)\n    }\n    // Have to check only if property exists, as null, undefined, and other vals could be explicitly set.\n    else if (actionMap.hasOwnProperty('set')) {\n      dset(payload, key, actionMap.set)\n    }\n\n    // to_string is not exclusive and can be paired with other actions. Final action.\n    if (actionMap.to_string) {\n      const valueToString = get(payload, key)\n\n      // Do not string arrays and objects. Do not double-encode strings.\n      if (\n        typeof valueToString === 'string' ||\n        (typeof valueToString === 'object' && valueToString !== null)\n      ) {\n        continue\n      }\n\n      // TODO: Check stringifier in Golang for parity.\n      if (valueToString !== undefined) {\n        dset(payload, key, JSON.stringify(valueToString))\n      } else {\n        // TODO: Check this behavior.\n        dset(payload, key, 'undefined')\n      }\n    }\n  }\n}\n\nfunction sampleEvent(payload: any, config: TransformerConfig): boolean {\n  if (config.sample.percent <= 0) {\n    return false\n  } else if (config.sample.percent >= 1) {\n    return true\n  }\n\n  // If we're not filtering deterministically, just use raw percentage.\n  if (!config.sample.path) {\n    return samplePercent(config.sample.percent)\n  }\n\n  // Otherwise, use a deterministic hash.\n  return sampleConsistentPercent(payload, config)\n}\n\nfunction samplePercent(percent: number): boolean {\n  // Math.random returns [0, 1) => 0.0<>0.9999...\n  return Math.random() <= percent\n}\n\n// sampleConsistentPercent converts an input string of bytes into a consistent uniform\n// continuous distribution of [0.0, 1.0]. This is based on\n// http://mumble.net/~campbell/tmp/random_real.c, but using the digest\n// result of the input value as the random information.\n\n// IMPORTANT - This function needs to === the Golang implementation to ensure that the two return the same vals!\n// See: https://github.com/segmentio/sampler/blob/65cb04132305a04fcd4bcaef67d57fbe40c30241/sampler.go#L13-L38\n\n// Since AJS supports IE9+ (typed arrays were introduced in IE10) we're doing some manual array math.\n// This could be done directly with strings, but arrays are easier to reason about/have better function support.\nfunction sampleConsistentPercent(payload: any, config: TransformerConfig): boolean {\n  const field = get(payload, config.sample.path)\n\n  // Operate off of JSON bytes. TODO: Validate all type behavior, esp. strings.\n  const digest: number[] = MD5(JSON.stringify(field))\n  let exponent = -64\n\n  // Manually maintain 64-bit int as an array.\n  let significand: number[] = []\n\n  // Left-shift and OR for first 8 bytes of digest. (8 bytes * 8 = 64 bits)\n  consumeDigest(digest.slice(0, 8), significand)\n\n  let leadingZeros = 0\n  for (let i = 0; i < 64; i++) {\n    if (significand[i] === 1) {\n      break\n    }\n\n    leadingZeros++\n  }\n\n  if (leadingZeros !== 0) {\n    // Use the last 8 bytes of the digest, same as before.\n    const val: number[] = []\n    consumeDigest(digest.slice(9, 16), val)\n\n    exponent -= leadingZeros\n    // Left-shift away leading zeros in significand.\n    significand.splice(0, leadingZeros)\n\n    // Right-shift val by 64 minus leading zeros and push into significand.\n    val.splice(64 - leadingZeros)\n    significand = significand.concat(val)\n  }\n\n  // Flip 64th bit\n  significand[63] = significand[63] === 0 ? 1 : 0\n\n  // Convert our manual binary into a JS num (binary arr => binary string => psuedo-int) and run the ldexp!\n  return ldexp(parseInt(significand.join(''), 2), exponent) < config.sample.percent\n}\n\n// Array byte filler helper\nfunction consumeDigest(digest: number[], arr: number[]) {\n  for (let i = 0; i < 8; i++) {\n    let remainder = digest[i]\n    for (let binary = 128; binary >= 1; binary /= 2) {\n      if (remainder - binary >= 0) {\n        remainder -= binary\n        arr.push(1)\n      } else {\n        arr.push(0)\n      }\n    }\n  }\n}\n","import get from 'dlv'\n\nexport function unset(obj, prop) {\n  if (get(obj, prop)) {\n    var segs = prop.split('.')\n    var last = segs.pop()\n    while (segs.length && segs[segs.length - 1].slice(-1) === '\\\\') {\n      last = segs.pop().slice(0, -1) + '.' + last\n    }\n    while (segs.length) obj = obj[(prop = segs.shift())]\n    return delete obj[last]\n  }\n  return true\n}\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Float64Array === 'function' ) ? Float64Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.\n*\n* @module @stdlib/array-float64\n*\n* @example\n* var ctor = require( '@stdlib/array-float64' );\n*\n* var arr = new ctor( 10 );\n* // returns <Float64Array>\n*/\n\n// MODULES //\n\nvar hasFloat64ArraySupport = require( '@stdlib/assert-has-float64array-support' );\nvar builtin = require( './float64array.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar ctor;\nif ( hasFloat64ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint16\n*\n* @example\n* var ctor = require( '@stdlib/array-uint16' );\n*\n* var arr = new ctor( 10 );\n* // returns <Uint16Array>\n*/\n\n// MODULES //\n\nvar hasUint16ArraySupport = require( '@stdlib/assert-has-uint16array-support' );\nvar builtin = require( './uint16array.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint16ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint16Array === 'function' ) ? Uint16Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint32\n*\n* @example\n* var ctor = require( '@stdlib/array-uint32' );\n*\n* var arr = new ctor( 10 );\n* // returns <Uint32Array>\n*/\n\n// MODULES //\n\nvar hasUint32ArraySupport = require( '@stdlib/assert-has-uint32array-support' );\nvar builtin = require( './uint32array.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint32ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint8\n*\n* @example\n* var ctor = require( '@stdlib/array-uint8' );\n*\n* var arr = new ctor( 10 );\n* // returns <Uint8Array>\n*/\n\n// MODULES //\n\nvar hasUint8ArraySupport = require( '@stdlib/assert-has-uint8array-support' );\nvar builtin = require( './uint8array.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint8ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint8Array === 'function' ) ? Uint8Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test for native `Float64Array` support.\n*\n* @module @stdlib/assert-has-float64array-support\n*\n* @example\n* var hasFloat64ArraySupport = require( '@stdlib/assert-has-float64array-support' );\n*\n* var bool = hasFloat64ArraySupport();\n* // returns <boolean>\n*/\n\n// MODULES //\n\nvar hasFloat64ArraySupport = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hasFloat64ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFloat64Array = require( '@stdlib/assert-is-float64array' );\nvar GlobalFloat64Array = require( './float64array.js' );\n\n\n// MAIN //\n\n/**\n* Tests for native `Float64Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Float64Array` support\n*\n* @example\n* var bool = hasFloat64ArraySupport();\n* // returns <boolean>\n*/\nfunction hasFloat64ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalFloat64Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = new GlobalFloat64Array( [ 1.0, 3.14, -3.14, NaN ] );\n\t\tbool = (\n\t\t\tisFloat64Array( arr ) &&\n\t\t\tarr[ 0 ] === 1.0 &&\n\t\t\tarr[ 1 ] === 3.14 &&\n\t\t\tarr[ 2 ] === -3.14 &&\n\t\t\tarr[ 3 ] !== arr[ 3 ]\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasFloat64ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test whether an object has a specified property.\n*\n* @module @stdlib/assert-has-own-property\n*\n* @example\n* var hasOwnProp = require( '@stdlib/assert-has-own-property' );\n*\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'boop' );\n* // returns true\n*\n* bool = hasOwnProp( beep, 'bop' );\n* // returns false\n*/\n\n// MODULES //\n\nvar hasOwnProp = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hasOwnProp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\nvar has = Object.prototype.hasOwnProperty;\n\n\n// MAIN //\n\n/**\n* Tests if an object has a specified property.\n*\n* @param {*} value - value to test\n* @param {*} property - property to test\n* @returns {boolean} boolean indicating if an object has a specified property\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'boop' );\n* // returns true\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'bap' );\n* // returns false\n*/\nfunction hasOwnProp( value, property ) {\n\tif (\n\t\tvalue === void 0 ||\n\t\tvalue === null\n\t) {\n\t\treturn false;\n\t}\n\treturn has.call( value, property );\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasOwnProp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test for native `Symbol` support.\n*\n* @module @stdlib/assert-has-symbol-support\n*\n* @example\n* var hasSymbolSupport = require( '@stdlib/assert-has-symbol-support' );\n*\n* var bool = hasSymbolSupport();\n* // returns <boolean>\n*/\n\n// MODULES //\n\nvar hasSymbolSupport = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hasSymbolSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests for native `Symbol` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Symbol` support\n*\n* @example\n* var bool = hasSymbolSupport();\n* // returns <boolean>\n*/\nfunction hasSymbolSupport() {\n\treturn (\n\t\ttypeof Symbol === 'function' &&\n\t\ttypeof Symbol( 'foo' ) === 'symbol'\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasSymbolSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test for native `toStringTag` support.\n*\n* @module @stdlib/assert-has-tostringtag-support\n*\n* @example\n* var hasToStringTagSupport = require( '@stdlib/assert-has-tostringtag-support' );\n*\n* var bool = hasToStringTagSupport();\n* // returns <boolean>\n*/\n\n// MODULES //\n\nvar hasToStringTagSupport = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hasToStringTagSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasSymbols = require( '@stdlib/assert-has-symbol-support' );\n\n\n// VARIABLES //\n\nvar FLG = hasSymbols();\n\n\n// MAIN //\n\n/**\n* Tests for native `toStringTag` support.\n*\n* @returns {boolean} boolean indicating if an environment has `toStringTag` support\n*\n* @example\n* var bool = hasToStringTagSupport();\n* // returns <boolean>\n*/\nfunction hasToStringTagSupport() {\n\treturn ( FLG && typeof Symbol.toStringTag === 'symbol' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasToStringTagSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test for native `Uint16Array` support.\n*\n* @module @stdlib/assert-has-uint16array-support\n*\n* @example\n* var hasUint16ArraySupport = require( '@stdlib/assert-has-uint16array-support' );\n*\n* var bool = hasUint16ArraySupport();\n* // returns <boolean>\n*/\n\n// MODULES //\n\nvar hasUint16ArraySupport = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hasUint16ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isUint16Array = require( '@stdlib/assert-is-uint16array' );\nvar UINT16_MAX = require( '@stdlib/constants-uint16-max' );\nvar GlobalUint16Array = require( './uint16array.js' );\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint16Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint16Array` support\n*\n* @example\n* var bool = hasUint16ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint16ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint16Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT16_MAX+1, UINT16_MAX+2 ];\n\t\tarr = new GlobalUint16Array( arr );\n\t\tbool = (\n\t\t\tisUint16Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&            // truncation\n\t\t\tarr[ 2 ] === UINT16_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&            // wrap around\n\t\t\tarr[ 4 ] === 1               // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasUint16ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test for native `Uint32Array` support.\n*\n* @module @stdlib/assert-has-uint32array-support\n*\n* @example\n* var hasUint32ArraySupport = require( '@stdlib/assert-has-uint32array-support' );\n*\n* var bool = hasUint32ArraySupport();\n* // returns <boolean>\n*/\n\n// MODULES //\n\nvar hasUint32ArraySupport = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hasUint32ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isUint32Array = require( '@stdlib/assert-is-uint32array' );\nvar UINT32_MAX = require( '@stdlib/constants-uint32-max' );\nvar GlobalUint32Array = require( './uint32array.js' );\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint32Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint32Array` support\n*\n* @example\n* var bool = hasUint32ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint32ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint32Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT32_MAX+1, UINT32_MAX+2 ];\n\t\tarr = new GlobalUint32Array( arr );\n\t\tbool = (\n\t\t\tisUint32Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&            // truncation\n\t\t\tarr[ 2 ] === UINT32_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&            // wrap around\n\t\t\tarr[ 4 ] === 1               // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasUint32ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test for native `Uint8Array` support.\n*\n* @module @stdlib/assert-has-uint8array-support\n*\n* @example\n* var hasUint8ArraySupport = require( '@stdlib/assert-has-uint8array-support' );\n*\n* var bool = hasUint8ArraySupport();\n* // returns <boolean>\n*/\n\n// MODULES //\n\nvar hasUint8ArraySupport = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hasUint8ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isUint8Array = require( '@stdlib/assert-is-uint8array' );\nvar UINT8_MAX = require( '@stdlib/constants-uint8-max' );\nvar GlobalUint8Array = require( './uint8array.js' );\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint8Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint8Array` support\n*\n* @example\n* var bool = hasUint8ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint8ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint8Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT8_MAX+1, UINT8_MAX+2 ];\n\t\tarr = new GlobalUint8Array( arr );\n\t\tbool = (\n\t\t\tisUint8Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&           // truncation\n\t\t\tarr[ 2 ] === UINT8_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&           // wrap around\n\t\t\tarr[ 4 ] === 1              // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasUint8ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a Float64Array.\n*\n* @module @stdlib/assert-is-float64array\n*\n* @example\n* var isFloat64Array = require( '@stdlib/assert-is-float64array' );\n*\n* var bool = isFloat64Array( new Float64Array( 10 ) );\n* // returns true\n*\n* bool = isFloat64Array( [] );\n* // returns false\n*/\n\n// MODULES //\n\nvar isFloat64Array = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isFloat64Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nativeClass = require( '@stdlib/utils-native-class' );\n\n\n// VARIABLES //\n\nvar hasFloat64Array = ( typeof Float64Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Float64Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Float64Array\n*\n* @example\n* var bool = isFloat64Array( new Float64Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isFloat64Array( [] );\n* // returns false\n*/\nfunction isFloat64Array( value ) {\n\treturn (\n\t\t( hasFloat64Array && value instanceof Float64Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Float64Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isFloat64Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint8Array = require( '@stdlib/array-uint8' );\nvar Uint16Array = require( '@stdlib/array-uint16' );\n\n\n// MAIN //\n\nvar ctors = {\n\t'uint16': Uint16Array,\n\t'uint8': Uint8Array\n};\n\n\n// EXPORTS //\n\nmodule.exports = ctors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a boolean indicating if an environment is little endian.\n*\n* @module @stdlib/assert-is-little-endian\n*\n* @example\n* var IS_LITTLE_ENDIAN = require( '@stdlib/assert-is-little-endian' );\n*\n* var bool = IS_LITTLE_ENDIAN;\n* // returns <boolean>\n*/\n\n// MODULES //\n\nvar IS_LITTLE_ENDIAN = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = IS_LITTLE_ENDIAN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ctors = require( './ctors.js' );\n\n\n// VARIABLES //\n\nvar bool;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if an environment is little endian.\n*\n* @private\n* @returns {boolean} boolean indicating if an environment is little endian\n*\n* @example\n* var bool = isLittleEndian();\n* // returns <boolean>\n*/\nfunction isLittleEndian() {\n\tvar uint16view;\n\tvar uint8view;\n\n\tuint16view = new ctors[ 'uint16' ]( 1 );\n\n\t/*\n\t* Set the uint16 view to a value having distinguishable lower and higher order words.\n\t*\n\t* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)\n\t*/\n\tuint16view[ 0 ] = 0x1234;\n\n\t// Create a uint8 view on top of the uint16 buffer:\n\tuint8view = new ctors[ 'uint8' ]( uint16view.buffer );\n\n\t// If little endian, the least significant byte will be first...\n\treturn ( uint8view[ 0 ] === 0x34 );\n}\n\n\n// MAIN //\n\nbool = isLittleEndian();\n\n\n// EXPORTS //\n\nmodule.exports = bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a Uint16Array.\n*\n* @module @stdlib/assert-is-uint16array\n*\n* @example\n* var isUint16Array = require( '@stdlib/assert-is-uint16array' );\n*\n* var bool = isUint16Array( new Uint16Array( 10 ) );\n* // returns true\n*\n* bool = isUint16Array( [] );\n* // returns false\n*/\n\n// MODULES //\n\nvar isUint16Array = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isUint16Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nativeClass = require( '@stdlib/utils-native-class' );\n\n\n// VARIABLES //\n\nvar hasUint16Array = ( typeof Uint16Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint16Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint16Array\n*\n* @example\n* var bool = isUint16Array( new Uint16Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint16Array( [] );\n* // returns false\n*/\nfunction isUint16Array( value ) {\n\treturn (\n\t\t( hasUint16Array && value instanceof Uint16Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint16Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isUint16Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a Uint32Array.\n*\n* @module @stdlib/assert-is-uint32array\n*\n* @example\n* var isUint32Array = require( '@stdlib/assert-is-uint32array' );\n*\n* var bool = isUint32Array( new Uint32Array( 10 ) );\n* // returns true\n*\n* bool = isUint32Array( [] );\n* // returns false\n*/\n\n// MODULES //\n\nvar isUint32Array = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isUint32Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nativeClass = require( '@stdlib/utils-native-class' );\n\n\n// VARIABLES //\n\nvar hasUint32Array = ( typeof Uint32Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint32Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint32Array\n*\n* @example\n* var bool = isUint32Array( new Uint32Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint32Array( [] );\n* // returns false\n*/\nfunction isUint32Array( value ) {\n\treturn (\n\t\t( hasUint32Array && value instanceof Uint32Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint32Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isUint32Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a Uint8Array.\n*\n* @module @stdlib/assert-is-uint8array\n*\n* @example\n* var isUint8Array = require( '@stdlib/assert-is-uint8array' );\n*\n* var bool = isUint8Array( new Uint8Array( 10 ) );\n* // returns true\n*\n* bool = isUint8Array( [] );\n* // returns false\n*/\n\n// MODULES //\n\nvar isUint8Array = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isUint8Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nativeClass = require( '@stdlib/utils-native-class' );\n\n\n// VARIABLES //\n\nvar hasUint8Array = ( typeof Uint8Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint8Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint8Array\n*\n* @example\n* var bool = isUint8Array( new Uint8Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint8Array( [] );\n* // returns false\n*/\nfunction isUint8Array( value ) {\n\treturn (\n\t\t( hasUint8Array && value instanceof Uint8Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint8Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isUint8Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The bias of a double-precision floating-point number's exponent.\n*\n* @module @stdlib/constants-float64-exponent-bias\n* @type {integer32}\n*\n* @example\n* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/constants-float64-exponent-bias' );\n* // returns 1023\n*/\n\n\n// MAIN //\n\n/**\n* Bias of a double-precision floating-point number's exponent.\n*\n* ## Notes\n*\n* The bias can be computed via\n*\n* ```tex\n* \\mathrm{bias} = 2^{k-1} - 1\n* ```\n*\n* where \\\\(k\\\\) is the number of bits in the exponent; here, \\\\(k = 11\\\\).\n*\n* @constant\n* @type {integer32}\n* @default 1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_EXPONENT_BIAS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the exponent of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-exponent-mask\n* @type {uinteger32}\n*\n* @example\n* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/constants-float64-high-word-exponent-mask' );\n* // returns 2146435072\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the exponent of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2146435072 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7ff00000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_HIGH_WORD_EXPONENT_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants-float64-max-base2-exponent-subnormal' );\n* // returns -1023\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* 00000000000 => 0 - BIAS = -1023\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default -1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max-base2-exponent\n* @type {integer32}\n*\n* @example\n* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/constants-float64-max-base2-exponent' );\n* // returns 1023\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a double-precision floating-point number.\n*\n* ```text\n* 11111111110 => 2046 - BIAS = 1023\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default 1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MAX_BASE2_EXPONENT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-min-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants-float64-min-base2-exponent-subnormal' );\n* // returns -1074\n*/\n\n\n// MAIN //\n\n/**\n* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* -(BIAS+(52-1)) = -(1023+51) = -1074\n* ```\n*\n* where `BIAS = 1023` and `52` is the number of digits in the significand.\n*\n* @constant\n* @type {integer32}\n* @default -1074\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* @module @stdlib/constants-float64-ninf\n* @type {number}\n*\n* @example\n* var FLOAT64_NINF = require( '@stdlib/constants-float64-ninf' );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nvar Number = require( '@stdlib/number-ctor' );\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.NEGATIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_NINF = Number.NEGATIVE_INFINITY;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_NINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* @module @stdlib/constants-float64-pinf\n* @type {number}\n*\n* @example\n* var FLOAT64_PINF = require( '@stdlib/constants-float64-pinf' );\n* // returns Infinity\n*/\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.POSITIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_PINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive double-precision floating-point normal number.\n*\n* @module @stdlib/constants-float64-smallest-normal\n* @type {number}\n*\n* @example\n* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants-float64-smallest-normal' );\n* // returns 2.2250738585072014e-308\n*/\n\n\n// MAIN //\n\n/**\n* The smallest positive double-precision floating-point normal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{1023-1}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000001 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default 2.2250738585072014e-308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_SMALLEST_NORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 16-bit integer.\n*\n* @module @stdlib/constants-uint16-max\n* @type {integer32}\n*\n* @example\n* var UINT16_MAX = require( '@stdlib/constants-uint16-max' );\n* // returns 65535\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 16-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{16} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 1111111111111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 65535\n*/\nvar UINT16_MAX = 65535|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = UINT16_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 32-bit integer.\n*\n* @module @stdlib/constants-uint32-max\n* @type {uinteger32}\n*\n* @example\n* var UINT32_MAX = require( '@stdlib/constants-uint32-max' );\n* // returns 4294967295\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 32-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{32} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 11111111111111111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 4294967295\n*/\nvar UINT32_MAX = 4294967295;\n\n\n// EXPORTS //\n\nmodule.exports = UINT32_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 8-bit integer.\n*\n* @module @stdlib/constants-uint8-max\n* @type {integer32}\n*\n* @example\n* var UINT8_MAX = require( '@stdlib/constants-uint8-max' );\n* // returns 255\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 8-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{8} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 11111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 255\n*/\nvar UINT8_MAX = 255|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = UINT8_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a double-precision floating-point numeric value is infinite.\n*\n* @module @stdlib/math-base-assert-is-infinite\n*\n* @example\n* var isInfinite = require( '@stdlib/math-base-assert-is-infinite' );\n*\n* var bool = isInfinite( Infinity );\n* // returns true\n*\n* bool = isInfinite( -Infinity );\n* // returns true\n*\n* bool = isInfinite( 5.0 );\n* // returns false\n*\n* bool = isInfinite( NaN );\n* // returns false\n*/\n\n// MODULES //\n\nvar isInfinite = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isInfinite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is infinite.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is infinite\n*\n* @example\n* var bool = isInfinite( Infinity );\n* // returns true\n*\n* @example\n* var bool = isInfinite( -Infinity );\n* // returns true\n*\n* @example\n* var bool = isInfinite( 5.0 );\n* // returns false\n*\n* @example\n* var bool = isInfinite( NaN );\n* // returns false\n*/\nfunction isInfinite( x ) {\n\treturn (x === PINF || x === NINF);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isInfinite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a double-precision floating-point numeric value is `NaN`.\n*\n* @module @stdlib/math-base-assert-is-nan\n*\n* @example\n* var isnan = require( '@stdlib/math-base-assert-is-nan' );\n*\n* var bool = isnan( NaN );\n* // returns true\n*\n* bool = isnan( 7.0 );\n* // returns false\n*/\n\n// MODULES //\n\nvar isnan = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is `NaN`.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( 7.0 );\n* // returns false\n*/\nfunction isnan( x ) {\n\treturn ( x !== x );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an absolute value of a double-precision floating-point number.\n*\n* @module @stdlib/math-base-special-abs\n*\n* @example\n* var abs = require( '@stdlib/math-base-special-abs' );\n*\n* var v = abs( -1.0 );\n* // returns 1.0\n*\n* v = abs( 2.0 );\n* // returns 2.0\n*\n* v = abs( 0.0 );\n* // returns 0.0\n*\n* v = abs( -0.0 );\n* // returns 0.0\n*\n* v = abs( NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar abs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = abs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the absolute value of a double-precision floating-point number `x`.\n*\n* @param {number} x - input value\n* @returns {number} absolute value\n*\n* @example\n* var v = abs( -1.0 );\n* // returns 1.0\n*\n* @example\n* var v = abs( 2.0 );\n* // returns 2.0\n*\n* @example\n* var v = abs( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( -0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( NaN );\n* // returns NaN\n*/\nfunction abs( x ) {\n\treturn Math.abs( x ); // eslint-disable-line stdlib/no-builtin-math\n}\n\n\n// EXPORTS //\n\nmodule.exports = abs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a double-precision floating-point number with the magnitude of `x` and the sign of `y`.\n*\n* @module @stdlib/math-base-special-copysign\n*\n* @example\n* var copysign = require( '@stdlib/math-base-special-copysign' );\n*\n* var z = copysign( -3.14, 10.0 );\n* // returns 3.14\n*\n* z = copysign( 3.14, -1.0 );\n* // returns -3.14\n*\n* z = copysign( 1.0, -0.0 );\n* // returns -1.0\n*\n* z = copysign( -3.14, -0.0 );\n* // returns -3.14\n*\n* z = copysign( -0.0, 1.0 );\n* // returns 0.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar toWords = require( '@stdlib/number-float64-base-to-words' );\nvar getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\nvar fromWords = require( '@stdlib/number-float64-base-from-words' );\n\n\n// VARIABLES //\n\n// 10000000000000000000000000000000 => 2147483648 => 0x80000000\nvar SIGN_MASK = 0x80000000>>>0; // asm type annotation\n\n// 01111111111111111111111111111111 => 2147483647 => 0x7fffffff\nvar MAGNITUDE_MASK = 0x7fffffff|0; // asm type annotation\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ];\n\n\n// MAIN //\n\n/**\n* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.\n*\n* @param {number} x - number from which to derive a magnitude\n* @param {number} y - number from which to derive a sign\n* @returns {number} a double-precision floating-point number\n*\n* @example\n* var z = copysign( -3.14, 10.0 );\n* // returns 3.14\n*\n* @example\n* var z = copysign( 3.14, -1.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( 1.0, -0.0 );\n* // returns -1.0\n*\n* @example\n* var z = copysign( -3.14, -0.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( -0.0, 1.0 );\n* // returns 0.0\n*/\nfunction copysign( x, y ) {\n\tvar hx;\n\tvar hy;\n\n\t// Split `x` into higher and lower order words:\n\ttoWords( WORDS, x );\n\thx = WORDS[ 0 ];\n\n\t// Turn off the sign bit of `x`:\n\thx &= MAGNITUDE_MASK;\n\n\t// Extract the higher order word from `y`:\n\thy = getHighWord( y );\n\n\t// Leave only the sign bit of `y` turned on:\n\thy &= SIGN_MASK;\n\n\t// Copy the sign bit of `y` to `x`:\n\thx |= hy;\n\n\t// Return a new value having the same magnitude as `x`, but with the sign of `y`:\n\treturn fromWords( hx, WORDS[ 1 ] );\n}\n\n\n// EXPORTS //\n\nmodule.exports = copysign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Multiply a double-precision floating-point number by an integer power of two.\n*\n* @module @stdlib/math-base-special-ldexp\n*\n* @example\n* var ldexp = require( '@stdlib/math-base-special-ldexp' );\n*\n* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8\n* // returns 4.0\n*\n* x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)\n* // returns 1.0\n*\n* x = ldexp( 0.0, 20 );\n* // returns 0.0\n*\n* x = ldexp( -0.0, 39 );\n* // returns -0.0\n*\n* x = ldexp( NaN, -101 );\n* // returns NaN\n*\n* x = ldexp( Infinity, 11 );\n* // returns Infinity\n*\n* x = ldexp( -Infinity, -118 );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nvar ldexp = require( './ldexp.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ldexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// NOTES //\n\n/*\n* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).\n*/\n\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar BIAS = require( '@stdlib/constants-float64-exponent-bias' );\nvar MAX_EXPONENT = require( '@stdlib/constants-float64-max-base2-exponent' );\nvar MAX_SUBNORMAL_EXPONENT = require( '@stdlib/constants-float64-max-base2-exponent-subnormal' );\nvar MIN_SUBNORMAL_EXPONENT = require( '@stdlib/constants-float64-min-base2-exponent-subnormal' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isInfinite = require( '@stdlib/math-base-assert-is-infinite' );\nvar copysign = require( '@stdlib/math-base-special-copysign' );\nvar normalize = require( '@stdlib/number-float64-base-normalize' );\nvar floatExp = require( '@stdlib/number-float64-base-exponent' );\nvar toWords = require( '@stdlib/number-float64-base-to-words' );\nvar fromWords = require( '@stdlib/number-float64-base-from-words' );\n\n\n// VARIABLES //\n\n// 1/(1<<52) = 1/(2**52) = 1/4503599627370496\nvar TWO52_INV = 2.220446049250313e-16;\n\n// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223\nvar CLEAR_EXP_MASK = 0x800fffff>>>0; // asm type annotation\n\n// Normalization workspace:\nvar FRAC = [ 0.0, 0.0 ]; // WARNING: not thread safe\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Multiplies a double-precision floating-point number by an integer power of two.\n*\n* @param {number} frac - fraction\n* @param {integer} exp - exponent\n* @returns {number} double-precision floating-point number\n*\n* @example\n* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8\n* // returns 4.0\n*\n* @example\n* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)\n* // returns 1.0\n*\n* @example\n* var x = ldexp( 0.0, 20 );\n* // returns 0.0\n*\n* @example\n* var x = ldexp( -0.0, 39 );\n* // returns -0.0\n*\n* @example\n* var x = ldexp( NaN, -101 );\n* // returns NaN\n*\n* @example\n* var x = ldexp( Infinity, 11 );\n* // returns Infinity\n*\n* @example\n* var x = ldexp( -Infinity, -118 );\n* // returns -Infinity\n*/\nfunction ldexp( frac, exp ) {\n\tvar high;\n\tvar m;\n\tif (\n\t\tfrac === 0.0 || // handles +-0\n\t\tisnan( frac ) ||\n\t\tisInfinite( frac )\n\t) {\n\t\treturn frac;\n\t}\n\t// Normalize the input fraction:\n\tnormalize( FRAC, frac );\n\tfrac = FRAC[ 0 ];\n\texp += FRAC[ 1 ];\n\n\t// Extract the exponent from `frac` and add it to `exp`:\n\texp += floatExp( frac );\n\n\t// Check for underflow/overflow...\n\tif ( exp < MIN_SUBNORMAL_EXPONENT ) {\n\t\treturn copysign( 0.0, frac );\n\t}\n\tif ( exp > MAX_EXPONENT ) {\n\t\tif ( frac < 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn PINF;\n\t}\n\t// Check for a subnormal and scale accordingly to retain precision...\n\tif ( exp <= MAX_SUBNORMAL_EXPONENT ) {\n\t\texp += 52;\n\t\tm = TWO52_INV;\n\t} else {\n\t\tm = 1.0;\n\t}\n\t// Split the fraction into higher and lower order words:\n\ttoWords( WORDS, frac );\n\thigh = WORDS[ 0 ];\n\n\t// Clear the exponent bits within the higher order word:\n\thigh &= CLEAR_EXP_MASK;\n\n\t// Set the exponent bits to the new exponent:\n\thigh |= ((exp+BIAS) << 20);\n\n\t// Create a new floating-point number:\n\treturn m * fromWords( high, WORDS[ 1 ] );\n}\n\n\n// EXPORTS //\n\nmodule.exports = ldexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Constructor which returns a `Number` object.\n*\n* @module @stdlib/number-ctor\n*\n* @example\n* var Number = require( '@stdlib/number-ctor' );\n*\n* var v = new Number( 10.0 );\n* // returns <Number>\n*/\n\n// MODULES //\n\nvar Number = require( './number.js' );\n\n\n// EXPORTS //\n\nmodule.exports = Number;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nmodule.exports = Number; // eslint-disable-line stdlib/require-globals\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.\n*\n* @module @stdlib/number-float64-base-exponent\n*\n* @example\n* var exponent = require( '@stdlib/number-float64-base-exponent' );\n*\n* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307\n* // returns -1019\n*\n* exp = exponent( -3.14 );\n* // returns 1\n*\n* exp = exponent( 0.0 );\n* // returns -1023\n*\n* exp = exponent( NaN );\n* // returns 1024\n*/\n\n// MODULES //\n\nvar exponent = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = exponent;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\nvar EXP_MASK = require( '@stdlib/constants-float64-high-word-exponent-mask' );\nvar BIAS = require( '@stdlib/constants-float64-exponent-bias' );\n\n\n// MAIN //\n\n/**\n* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {integer32} unbiased exponent\n*\n* @example\n* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307\n* // returns -1019\n*\n* @example\n* var exp = exponent( -3.14 );\n* // returns 1\n*\n* @example\n* var exp = exponent( 0.0 );\n* // returns -1023\n*\n* @example\n* var exp = exponent( NaN );\n* // returns 1024\n*/\nfunction exponent( x ) {\n\t// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:\n\tvar high = getHighWord( x );\n\n\t// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:\n\thigh = ( high & EXP_MASK ) >>> 20;\n\n\t// Remove the bias and return:\n\treturn (high - BIAS)|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nmodule.exports = exponent;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @module @stdlib/number-float64-base-from-words\n*\n* @example\n* var fromWords = require( '@stdlib/number-float64-base-from-words' );\n*\n* var v = fromWords( 1774486211, 2479577218 );\n* // returns 3.14e201\n*\n* v = fromWords( 3221823995, 1413754136 );\n* // returns -3.141592653589793\n*\n* v = fromWords( 0, 0 );\n* // returns 0.0\n*\n* v = fromWords( 2147483648, 0 );\n* // returns -0.0\n*\n* v = fromWords( 2146959360, 0 );\n* // returns NaN\n*\n* v = fromWords( 2146435072, 0 );\n* // returns Infinity\n*\n* v = fromWords( 4293918720, 0 );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nvar fromWords = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = fromWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert-is-little-endian' );\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nmodule.exports = indices;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array-uint32' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar indices = require( './indices.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n*\n* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {uinteger32} high - higher order word (unsigned 32-bit integer)\n* @param {uinteger32} low - lower order word (unsigned 32-bit integer)\n* @returns {number} floating-point number\n*\n* @example\n* var v = fromWords( 1774486211, 2479577218 );\n* // returns 3.14e201\n*\n* @example\n* var v = fromWords( 3221823995, 1413754136 );\n* // returns -3.141592653589793\n*\n* @example\n* var v = fromWords( 0, 0 );\n* // returns 0.0\n*\n* @example\n* var v = fromWords( 2147483648, 0 );\n* // returns -0.0\n*\n* @example\n* var v = fromWords( 2146959360, 0 );\n* // returns NaN\n*\n* @example\n* var v = fromWords( 2146435072, 0 );\n* // returns Infinity\n*\n* @example\n* var v = fromWords( 4293918720, 0 );\n* // returns -Infinity\n*/\nfunction fromWords( high, low ) {\n\tUINT32_VIEW[ HIGH ] = high;\n\tUINT32_VIEW[ LOW ] = low;\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert-is-little-endian' );\n\n\n// MAIN //\n\nvar HIGH;\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n} else {\n\tHIGH = 0; // first index\n}\n\n\n// EXPORTS //\n\nmodule.exports = HIGH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.\n*\n* @module @stdlib/number-float64-base-get-high-word\n*\n* @example\n* var getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\n*\n* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011\n* // returns 1774486211\n*/\n\n// MODULES //\n\nvar getHighWord = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = getHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array-uint32' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar HIGH = require( './high.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - input value\n* @returns {uinteger32} higher order word\n*\n* @example\n* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011\n* // returns 1774486211\n*/\nfunction getHighWord( x ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\treturn UINT32_VIEW[ HIGH ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = getHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @module @stdlib/number-float64-base-normalize\n*\n* @example\n* var normalize = require( '@stdlib/number-float64-base-normalize' );\n* var pow = require( '@stdlib/math-base-special-pow' );\n*\n* var out = normalize( 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var normalize = require( '@stdlib/number-float64-base-normalize' );\n*\n* var out = new Float64Array( 2 );\n*\n* var v = normalize( out, 3.14e-319 );\n* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar normalize = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar fcn = require( './normalize.js' );\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @param {(Array|TypedArray|Object)} [out] - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var pow = require( '@stdlib/math-base-special-pow' );\n*\n* var out = normalize( [ 0.0, 0 ], 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var pow = require( '@stdlib/math-base-special-pow' );\n*\n* var out = new Float64Array( 2 );\n*\n* var v = normalize( out, 3.14e-319 );\n* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]\n*\n* var bool = ( v === out );\n* // returns true\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], Infinity );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], -Infinity );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( out, x ) {\n\tif ( arguments.length === 1 ) {\n\t\treturn fcn( [ 0.0, 0 ], out );\n\t}\n\treturn fcn( out, x );\n}\n\n\n// EXPORTS //\n\nmodule.exports = normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants-float64-smallest-normal' );\nvar isInfinite = require( '@stdlib/math-base-assert-is-infinite' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar abs = require( '@stdlib/math-base-special-abs' );\n\n\n// VARIABLES //\n\n// (1<<52)\nvar SCALAR = 4503599627370496;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var pow = require( '@stdlib/math-base-special-pow' );\n*\n* var out = normalize( [ 0.0, 0 ], 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], 0.0 );\n* // returns [ 0.0, 0 ];\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], Infinity );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], -Infinity );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( [ 0.0, 0 ], NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( out, x ) {\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\tout[ 0 ] = x;\n\t\tout[ 1 ] = 0;\n\t\treturn out;\n\t}\n\tif ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {\n\t\tout[ 0 ] = x * SCALAR;\n\t\tout[ 1 ] = -52;\n\t\treturn out;\n\t}\n\tout[ 0 ] = x;\n\tout[ 1 ] = 0;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Split a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @module @stdlib/number-float64-base-to-words\n*\n* @example\n* var toWords = require( '@stdlib/number-float64-base-to-words' );\n*\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*\n* @example\n* var Uint32Array = require( '@stdlib/array-uint32' );\n* var toWords = require( '@stdlib/number-float64-base-to-words' );\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords( out, 3.14e201 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar toWords = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = toWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert-is-little-endian' );\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nmodule.exports = indices;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar fcn = require( './to_words.js' );\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @param {(Array|TypedArray|Object)} [out] - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*\n* @example\n* var Uint32Array = require( '@stdlib/array-uint32' );\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords( out, 3.14e201 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\nfunction toWords( out, x ) {\n\tif ( arguments.length === 1 ) {\n\t\treturn fcn( [ 0, 0 ], out );\n\t}\n\treturn fcn( out, x );\n}\n\n\n// EXPORTS //\n\nmodule.exports = toWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array-uint32' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar indices = require( './indices.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var Uint32Array = require( '@stdlib/array-uint32' );\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords( out, 3.14e201 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\nfunction toWords( out, x ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tout[ 0 ] = UINT32_VIEW[ HIGH ];\n\tout[ 1 ] = UINT32_VIEW[ LOW ];\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string value indicating a specification defined classification of an object.\n*\n* @module @stdlib/utils-native-class\n*\n* @example\n* var nativeClass = require( '@stdlib/utils-native-class' );\n*\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* function Beep() {\n*     return this;\n* }\n* str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\n\n// MODULES //\n\nvar hasToStringTag = require( '@stdlib/assert-has-tostringtag-support' );\nvar builtin = require( './native_class.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar nativeClass;\nif ( hasToStringTag() ) {\n\tnativeClass = polyfill;\n} else {\n\tnativeClass = builtin;\n}\n\n\n// EXPORTS //\n\nmodule.exports = nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar toStr = require( './tostring.js' );\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\treturn toStr.call( v );\n}\n\n\n// EXPORTS //\n\nmodule.exports = nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar toStringTag = require( './tostringtag.js' );\nvar toStr = require( './tostring.js' );\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\tvar isOwn;\n\tvar tag;\n\tvar out;\n\n\tif ( v === null || v === void 0 ) {\n\t\treturn toStr.call( v );\n\t}\n\ttag = v[ toStringTag ];\n\tisOwn = hasOwnProp( v, toStringTag );\n\n\t// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.\n\ttry {\n\t\tv[ toStringTag ] = void 0;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn toStr.call( v );\n\t}\n\tout = toStr.call( v );\n\n\tif ( isOwn ) {\n\t\tv[ toStringTag ] = tag;\n\t} else {\n\t\tdelete v[ toStringTag ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar toStr = Object.prototype.toString;\n\n\n// EXPORTS //\n\nmodule.exports = toStr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';\n\n\n// EXPORTS //\n\nmodule.exports = toStrTag;\n","export default function dlv(obj, key, def, p, undef) {\n\tkey = key.split ? key.split('.') : key;\n\tfor (p = 0; p < key.length; p++) {\n\t\tobj = obj ? obj[key[p]] : undef;\n\t}\n\treturn obj === undef ? def : obj;\n}\n","function dset(obj, keys, val) {\n\tkeys.split && (keys=keys.split('.'));\n\tvar i=0, l=keys.length, t=obj, x, k;\n\twhile (i < l) {\n\t\tk = keys[i++];\n\t\tif (k === '__proto__' || k === 'constructor' || k === 'prototype') break;\n\t\tt = t[k] = (i === l) ? val : (typeof(x=t[k])===typeof(keys)) ? x : (keys[i]*0 !== 0 || !!~(''+keys[i]).indexOf('.')) ? {} : [];\n\t}\n}\n\nexports.dset = dset;","// See \"precomputation\" in notes\nvar k = [], i = 0;\n\nfor (; i < 64;) {\n  k[i] = 0 | Math.sin(++i % Math.PI) * 4294967296;\n  // k[i] = 0 | (Math.abs(Math.sin(++i)) * 4294967296);\n}\n\nexport default function md5(s) {\n  var b, c, d,\n    h = [ b = 0x67452301, c = 0xEFCDAB89, ~b, ~c ],\n    words = [],\n    j = unescape(encodeURI(s)) + '\\x80',\n    a = j.length;\n\n  s = (--a / 4 + 2) | 15;\n\n  // See \"Length bits\" in notes\n  words[--s] = a * 8;\n\n  for (; ~a;) { // a !== -1\n    words[a >> 2] |= j.charCodeAt(a) << 8 * a--;\n  }\n\n\n  for (i = j = 0; i < s; i += 16) {\n    a = h;\n\n    for (; j < 64;\n      a = [\n        d = a[3],\n        (\n          b +\n          ((d =\n            a[0] +\n            [\n              b & c | ~b & d,\n              d & b | ~d & c,\n              b ^ c ^ d,\n              c ^ (b | ~d)\n            ][a = j >> 4] +\n            k[j] +\n            ~~words[i | [\n              j,\n              5 * j + 1,\n              3 * j + 5,\n              7 * j\n            ][a] & 15]\n          ) << (a = [\n            7, 12, 17, 22,\n            5,  9, 14, 20,\n            4, 11, 16, 23,\n            6, 10, 15, 21\n          ][4 * a + j++ % 4]) | d >>> -a)\n        ),\n        b,\n        c\n      ]\n    ) {\n      b = a[1] | 0;\n      c = a[2];\n    }\n\n    // See \"Integer safety\" in notes\n    for (j = 4; j;) h[--j] += a[j];\n\n    // j === 0\n  }\n\n  for (s = ''; j < 32;) {\n    s += ((h[j >> 3] >> ((1 ^ j++) * 4)) & 15).toString(16);\n    // s += ((h[j >> 3] >> (4 ^ 4 * j++)) & 15).toString(16);\n  }\n\n  return s;\n}\n"],"names":["tsubMiddleware","rules","_a","payload","integration","next","tsub","getRulesByDestinationName","forEach","rule","matchers","transformers","i","length","obj","Object","enumerable","get","default","fqlEvaluate","ir","event","Array","isArray","getValue","item","first","second","operator","isIR","JSON","stringify","Error","compareItems","compareNumbers","list","undefined","find","it","checkInList","indexOf","contains","str","glob","pattern","Pattern","star","chunk","scanChunk","matchChunk","t","ok","err","_b","slice","globMatches","match","target","toLowerCase","NaN","value","result","inRange","Scan","char","notNegated","foundMatch","nRange","lo","hi","getEsc","newChunk","exports","matcher","type","parse","e","concat","fql","this","Store","destinationName","_i","push","dropProperties","config","key","drop","hasOwnProperty","field","allowProperties","allow","k","mapProperties","initialPayload","map","actionMap","splitKey","split","parent_1","pop","join","copy","valueToCopy","dset","move","valueToMove","unset","set","to_string","valueToString","sampleEvent","sample","percent","path","digest","exponent","significand","consumeDigest","leadingZeros","val","splice","parseInt","sampleConsistentPercent","Math","random","arr","remainder","binary","transformedPayload","transformer","prop","segs","last","shift","ctor","Float64Array","module","hasFloat64ArraySupport","require","builtin","polyfill","hasUint16ArraySupport","Uint16Array","hasUint32ArraySupport","Uint32Array","hasUint8ArraySupport","Uint8Array","main","isFloat64Array","GlobalFloat64Array","bool","hasOwnProp","has","prototype","property","call","hasSymbolSupport","Symbol","hasToStringTagSupport","FLG","hasSymbols","toStringTag","isUint16Array","UINT16_MAX","GlobalUint16Array","isUint32Array","UINT32_MAX","GlobalUint32Array","isUint8Array","UINT8_MAX","GlobalUint8Array","nativeClass","hasFloat64Array","ctors","IS_LITTLE_ENDIAN","uint16view","buffer","isLittleEndian","hasUint16Array","hasUint32Array","hasUint8Array","FLOAT64_NINF","NEGATIVE_INFINITY","FLOAT64_PINF","Number","POSITIVE_INFINITY","isInfinite","PINF","NINF","x","isnan","abs","toWords","getHighWord","fromWords","WORDS","y","hx","hy","ldexp","BIAS","MAX_EXPONENT","MAX_SUBNORMAL_EXPONENT","MIN_SUBNORMAL_EXPONENT","copysign","normalize","floatExp","FRAC","frac","exp","high","m","EXP_MASK","indices","HIGH","LOW","FLOAT64_VIEW","UINT32_VIEW","low","fcn","out","arguments","FLOAT64_SMALLEST_NORMAL","hasToStringTag","toStr","v","isOwn","tag","toString","toStrTag","def","p","undef","keys","l","sin","PI","s","b","c","d","h","words","j","unescape","encodeURI","a","charCodeAt"],"sourceRoot":""}